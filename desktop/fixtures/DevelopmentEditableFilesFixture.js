export default {
  isEnabled: true,
  fixture: {
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/aim.wav': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/aim.wav',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/aim.wav',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/hoop.png': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/hoop.png',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/hoop.png',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/bounce.wav': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/bounce.wav',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/bounce.wav',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/shoot.wav': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/shoot.wav',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/shoot.wav',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/main.lua': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/main.lua',
      content:
        "-- Game constants\nlocal DRAW_PHYSICS_OBJECTS = false\nlocal GAME_WIDTH = 192\nlocal GAME_HEIGHT = 192\nlocal SHOT_X = 25\nlocal SHOT_Y = 140\nlocal BALL_BOUNCINESS = 0.7\nlocal GRAVITY = 200\n\n-- Game variables\nlocal world\nlocal ball\nlocal hoop\nlocal backboard\nlocal flashes\nlocal shotStep\nlocal shotTimer\nlocal shotAngle\nlocal shotPower\nlocal celebrationTimer\n\n-- Assets\nlocal ballImage\nlocal hoopImage\nlocal flashImage\nlocal aimSound\nlocal powerSound\nlocal shootSound\nlocal bounceSound\nlocal flashSound\n\n-- Initializes the game\nfunction love.load()\n  -- Load assets\n  ballImage = love.graphics.newImage('img/ball.png')\n  hoopImage = love.graphics.newImage('img/hoop.png')\n  flashImage = love.graphics.newImage('img/flash.png')\n  ballImage:setFilter('nearest', 'nearest')\n  hoopImage:setFilter('nearest', 'nearest')\n  flashImage:setFilter('nearest', 'nearest')\n  aimSound = love.audio.newSource('sfx/aim.wav', 'static')\n  powerSound = love.audio.newSource('sfx/power.wav', 'static')\n  shootSound = love.audio.newSource('sfx/shoot.wav', 'static')\n  bounceSound = love.audio.newSource('sfx/bounce.wav', 'static')\n  flashSound = love.audio.newSource('sfx/flash.wav', 'static')\n\n  -- Initialize game variables\n  shotStep = 'aim'\n  shotTimer = 0.00\n  shotAngle = 0\n  shotPower = 0\n  celebrationTimer = 0.00\n\n  -- Set up the physics world\n  love.physics.setMeter(10)\n  world = love.physics.newWorld(0, GRAVITY, true)\n  world:setCallbacks(onCollide)\n \n  -- Create the ball\n  ball = createCircle(SHOT_X, SHOT_Y, 8)\n  ball.fixture:setRestitution(BALL_BOUNCINESS)\n\n  -- Create the hoop (it's actually just two static circles, one for each side of the hoop)\n  hoop = {\n    createCircle(139, 82, 2, true),\n    createCircle(163, 82, 2, true)\n  }\n\n  -- Create the backboard\n  backboard = createRectangle(170, 65, 5, 50, true)\n\n  -- Create an empty array for camera flashes\n  flashes = {}\nend\n\n-- Updates the game state\nfunction love.update(dt)\n  -- Update timers\n  shotTimer = shotTimer + dt\n  celebrationTimer = math.max(0.00, celebrationTimer - dt)\n\n  -- Update the physics simulation\n  world:update(dt)\n\n  -- Aim the ball and select power\n  local t = shotTimer % 2.00\n  if shotStep == 'aim' then\n    if t < 1.00 then\n      shotAngle = -t * math.pi / 2\n    else\n      shotAngle = (t - 2.00) * math.pi / 2\n    end\n  elseif shotStep == 'power' then\n    if t < 1.00 then\n      shotPower = t\n    else\n      shotPower = 2.00 - t\n    end\n  end\n\n  -- Keep the ball in one place until it's been shot\n  if shotStep ~= 'shoot' then\n    ball.body:setPosition(SHOT_X, SHOT_Y)\n    ball.body:setLinearVelocity(0, 0)\n  end\n\n  -- Check for baskets\n  local dx = ball.body:getX() - (hoop[1].body:getX() + hoop[2].body:getX()) / 2\n  local dy = ball.body:getY() - (hoop[1].body:getY() + hoop[2].body:getY()) / 2\n  local dist = math.sqrt(dx * dx + dy * dy)\n  if dist < 3 and celebrationTimer <= 0.00 then\n    celebrationTimer = 1.00\n    love.audio.play(flashSound:clone())\n  end\n\n  -- Camera flashes!\n  if celebrationTimer > 0.00 then\n    for _, flash in ipairs(flashes) do\n      flash.timeToDisappear = math.max(0.00, flash.timeToDisappear - dt)\n    end\n    table.insert(flashes, {\n      x = math.random(10, GAME_WIDTH - 10),\n      y = math.random(10, GAME_HEIGHT - 10),\n      timeToDisappear = 0.10\n    })\n  else\n    flashes = {}\n  end\nend\n\n-- Renders the game\nfunction love.draw()\n  -- Clear the screen\n  if celebrationTimer > 0.00 then\n    love.graphics.clear(253 / 255, 217 / 255, 37 / 255)\n  else\n    love.graphics.clear(252 / 255, 147 / 255, 1 / 255)\n  end\n  love.graphics.setColor(1, 1, 1)\n\n  -- Draw the camera flashes\n  for _, flash in ipairs(flashes) do\n    if flash.timeToDisappear > 0.00 then\n      love.graphics.draw(flashImage, flash.x - 5, flash.y - 7)\n    end\n  end\n\n  -- Draw the ball\n  love.graphics.draw(ballImage, ball.body:getX() - 8, ball.body:getY() - 8)\n\n  -- Draw the hoop\n  love.graphics.draw(hoopImage, 138, 40)\n\n  -- Draw aiming reticle\n  if shotStep ~= 'shoot' then\n    love.graphics.setColor(91 / 255, 20 / 255, 3 / 255)\n    local increment = 5 + 8 * shotPower\n    for dist = 8 + increment, 8 + 5 * increment, increment do\n      love.graphics.rectangle('fill', SHOT_X + math.cos(shotAngle) * dist - 1, SHOT_Y + math.sin(shotAngle) * dist - 1, 2, 2)\n    end\n  end\n\n  -- Draw the physics objects (for debugging)\n  if DRAW_PHYSICS_OBJECTS then\n    love.graphics.setColor(1, 1, 1)\n    love.graphics.circle('fill', ball.body:getX(), ball.body:getY(), ball.shape:getRadius())\n    love.graphics.circle('fill', hoop[1].body:getX(), hoop[1].body:getY(), hoop[1].shape:getRadius())\n    love.graphics.circle('fill', hoop[2].body:getX(), hoop[2].body:getY(), hoop[2].shape:getRadius())\n    love.graphics.polygon('fill', backboard.body:getWorldPoints(backboard.shape:getPoints()))\n  end\nend\n\n-- Shoot the ball by pressing space\nfunction love.keypressed(key)\n  if key == 'space' then\n    shotTimer = 0.00\n    -- Go from aiming to selecting power\n    if shotStep == 'aim' then\n      shotStep = 'power'\n      love.audio.play(powerSound:clone())\n    -- Go from selecting power to shooting the ball\n    elseif shotStep == 'power' then\n      shotStep = 'shoot'\n      love.audio.play(shootSound:clone())\n      local speed = 180 * shotPower + 120\n      ball.body:setLinearVelocity(speed * math.cos(shotAngle), speed * math.sin(shotAngle))\n    -- And then press space again to start aiming again\n    elseif shotStep == 'shoot' then\n      shotAngle = 0\n      shotPower = 0\n      shotStep = 'aim'\n      love.audio.play(aimSound:clone())\n    end\n  end\nend\n\n-- Play a sound when there's a collision\nfunction onCollide()\n  love.audio.play(bounceSound:clone())\nend\n\n-- Creates a new physics object that's just a 2D circle\nfunction createCircle(x, y, radius, isStatic)\n  -- Create the physics objects\n  local body = love.physics.newBody(world, x, y, isStatic and 'static' or 'dynamic')\n  local shape = love.physics.newCircleShape(radius)\n  local fixture = love.physics.newFixture(body, shape, 1)\n  -- Return the circle\n  return { body = body, shape = shape, fixture = fixture }\nend\n\n-- Creates a new physics object that's just a 2D rectangle\nfunction createRectangle(x, y, width, height, isStatic)\n  -- Create the physics objects\n  local body = love.physics.newBody(world, x, y, isStatic and 'static' or 'dynamic')\n  local shape = love.physics.newRectangleShape(width, height)\n  local fixture = love.physics.newFixture(body, shape, 1)\n  -- Return the rectangle\n  return { body = body, shape = shape, fixture = fixture }\nend\n",
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/main.lua',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/flash.wav': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/flash.wav',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/flash.wav',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/ball.png': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/ball.png',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/ball.png',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/power.wav': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/power.wav',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/sfx/power.wav',
    },
    'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/flash.png': {
      url: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/flash.png',
      filename: 'https://raw.githubusercontent.com/bridgs/lil-hoops/master/img/flash.png',
    },
  },
};
