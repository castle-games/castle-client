{"version":3,"file":"slate.js","sources":["../src/utils/key-utils.js","../src/models/data.js","../src/models/document.js","../src/models/inline.js","../src/models/mark.js","../src/models/leaf.js","../src/utils/memoize.js","../src/models/text.js","../src/models/node.js","../src/models/block.js","../src/changes/at-current-range.js","../src/utils/text-utils.js","../src/changes/at-range.js","../src/utils/path-utils.js","../src/changes/by-path.js","../src/changes/on-history.js","../src/models/point.js","../src/models/decoration.js","../src/utils/is-object.js","../src/models/range.js","../src/models/selection.js","../src/changes/on-selection.js","../src/models/history.js","../src/models/stack.js","../src/utils/slate-error.js","../src/models/schema.js","../src/models/value.js","../src/changes/on-value.js","../src/changes/index.js","../src/operations/apply.js","../src/operations/invert.js","../src/models/operation.js","../src/models/change.js","../src/utils/mixin.js","../src/interfaces/object.js","../src/interfaces/model.js","../src/interfaces/node.js","../src/interfaces/element.js","../src/interfaces/range.js","../src/operations/index.js","../src/index.js"],"sourcesContent":["/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Create a key, using a provided key if available.\n *\n * @param {String|Void} key\n * @return {String}\n */\n\nfunction create(key) {\n  if (key == null) {\n    return generate()\n  }\n\n  if (typeof key === 'string') {\n    return key\n  }\n\n  throw new Error(`Keys must be strings, but you passed: ${key}`)\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  create,\n  setGenerator,\n  resetGenerator,\n}\n","import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return document\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return inline\n  }\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","import isPlainObject from 'is-plain-object'\nimport { Map, Record, Set } from 'immutable'\n\nimport Data from './data'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Set } from 'immutable'\n\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: undefined,\n  text: undefined,\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a valid List of `Leaf` from `leaves`\n   *\n   * @param {List<Leaf>} leaves\n   * @return {List<Leaf>}\n   */\n\n  static createLeaves(leaves) {\n    if (leaves.size <= 1) return leaves\n\n    let invalid = false\n\n    // TODO: we can make this faster with [List] and then flatten\n    const result = List().withMutations(cache => {\n      // Search from the leaves left end to find invalid node;\n      leaves.findLast((leaf, index) => {\n        const firstLeaf = cache.first()\n\n        // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n        if (firstLeaf) {\n          // If marks equals, then the two leaves can be connected\n          if (firstLeaf.marks.equals(leaf.marks)) {\n            invalid = true\n            cache.set(0, firstLeaf.set('text', `${leaf.text}${firstLeaf.text}`))\n            return\n          }\n\n          // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n          if (firstLeaf.text === '') {\n            invalid = true\n            cache.set(0, leaf)\n            return\n          }\n\n          // If the current leaf is empty, drop the leaf\n          if (leaf.text === '') {\n            invalid = true\n            return\n          }\n        }\n\n        cache.unshift(leaf)\n      })\n    })\n\n    if (!invalid) return leaves\n    return result\n  }\n\n  /**\n   * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n   * Corner Cases:\n   *   1. if offset is smaller than 0, then return [List(), leaves]\n   *   2. if offset is bigger than the text length, then return [leaves, List()]\n   *\n   * @param {List<Leaf> leaves\n   * @return {Array<List<Leaf>>}\n   */\n\n  static splitLeaves(leaves, offset) {\n    if (offset < 0) return [List(), leaves]\n\n    if (leaves.size === 0) {\n      return [List(), List()]\n    }\n\n    let endOffset = 0\n    let index = -1\n    let left, right\n\n    leaves.find(leaf => {\n      index++\n      const startOffset = endOffset\n      const { text } = leaf\n      endOffset += text.length\n\n      if (endOffset < offset) return false\n      if (startOffset > offset) return false\n\n      const length = offset - startOffset\n      left = leaf.set('text', text.slice(0, length))\n      right = leaf.set('text', text.slice(length))\n      return true\n    })\n\n    if (!left) return [leaves, List()]\n\n    if (left.text === '') {\n      if (index === 0) {\n        return [List.of(left), leaves]\n      }\n\n      return [leaves.take(index), leaves.skip(index)]\n    }\n\n    if (right.text === '') {\n      if (index === leaves.size - 1) {\n        return [leaves, List.of(right)]\n      }\n\n      return [leaves.take(index + 1), leaves.skip(index + 1)]\n    }\n\n    return [\n      leaves.take(index).push(left),\n      leaves.skip(index + 1).unshift(right),\n    ]\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Update a `mark` at leaf, replace with newMark\n   *\n   * @param {Mark} mark\n   * @param {Mark} newMark\n   * @returns {Leaf}\n   */\n\n  updateMark(mark, newMark) {\n    const { marks } = this\n    if (newMark.equals(mark)) return this\n    if (!marks.has(mark)) return this\n    const newMarks = marks.withMutations(collection => {\n      collection.remove(mark).add(newMark)\n    })\n    return this.set('marks', newMarks)\n  }\n\n  /**\n   * Add a `mark` to the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  addMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.add(mark))\n  }\n\n  /**\n   * Add a `set` of marks to the leaf.\n   *\n   * @param {Set<Mark>} set\n   * @returns {Text}\n   */\n\n  addMarks(set) {\n    const { marks } = this\n    return this.set('marks', marks.union(set))\n  }\n\n  /**\n   * Remove a `mark` from the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  removeMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.remove(mark))\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * GLOBAL: Changing this cache key will clear all previous cached results.\n *\n * @type {Number}\n */\n\nlet CACHE_KEY = 0\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Object}\n */\n\nconst LEAF = {}\n\n/**\n * A value to represent a memoized undefined value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Object}\n */\n\nconst UNDEFINED = {}\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      // If the cache key is different, previous caches must be cleared.\n      if (CACHE_KEY !== this.__cache_key) {\n        this.__cache_key = CACHE_KEY\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n        this.__cache_no_args = {}\n      }\n\n      if (!this.__cache) {\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      }\n\n      if (!this.__cache_no_args) {\n        this.__cache_no_args = {}\n      }\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(this.__cache, keys)\n      } else {\n        cachedValue = this.__cache_no_args[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        this.__cache = setIn(this.__cache, keys, v)\n      } else {\n        this.__cache_no_args[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (const key of keys) {\n    map = map.get(key)\n    if (map === UNSET) return UNSET\n  }\n\n  return map.get(LEAF)\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let parent = map\n  let child\n\n  for (const key of keys) {\n    child = parent.get(key)\n\n    // If the path was not created yet...\n    if (child === UNSET) {\n      child = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      parent.set(key, child)\n    }\n\n    parent = child\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child.set(LEAF, value)\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  CACHE_KEY++\n\n  if (CACHE_KEY >= Number.MAX_SAFE_INTEGER) {\n    CACHE_KEY = 0\n  }\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { List, OrderedSet, Record, Set } from 'immutable'\n\nimport Leaf from './leaf'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  leaves: undefined,\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { key = KeyUtils.create() } = object\n    let { leaves } = object\n\n    if (!leaves) {\n      if (object.ranges) {\n        warning(\n          false,\n          'As of slate@0.27.0, the `ranges` property of Slate objects has been renamed to `leaves`.'\n        )\n\n        leaves = object.ranges\n      } else {\n        leaves = List()\n      }\n    }\n\n    if (Array.isArray(leaves)) {\n      leaves = List(leaves.map(x => Leaf.create(x)))\n    } else if (List.isList(leaves)) {\n      leaves = leaves.map(x => Leaf.create(x))\n    } else {\n      throw new Error('leaves must be either Array or Immutable.List')\n    }\n\n    const node = new Text({\n      leaves: Leaf.createLeaves(leaves),\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n   * Corner Cases:\n   *   1. if offset is negative, return the first leaf;\n   *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n   *\n   * @param {number}\n   * @returns {Object}\n   *   @property {number} startOffset\n   *   @property {number} endOffset\n   *   @property {number} index\n   *   @property {Leaf} leaf\n   */\n\n  searchLeafAtOffset(offset) {\n    let endOffset = 0\n    let startOffset = 0\n    let index = -1\n\n    const leaf = this.leaves.find(l => {\n      index++\n      startOffset = endOffset\n      endOffset = startOffset + l.text.length\n      return endOffset >= offset\n    })\n\n    return {\n      leaf,\n      endOffset,\n      index,\n      startOffset,\n    }\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = Set.of(mark)\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   * Corner Cases:\n   *   1. If empty text, and if length === 0 and index === 0, will make sure the text contain an empty leaf with the given mark.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n\n      if (!first) {\n        return this.set(\n          'leaves',\n          List.of(Leaf.fromJSON({ text: '', marks: set }))\n        )\n      }\n\n      const newFirst = first.addMarks(set)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (this.text === '') return this\n    if (length === 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.addMarks(set)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Derive the leaves for a list of `decorations`.\n   *\n   * @param {Array|Void} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations = []) {\n    let { leaves } = this\n    if (leaves.size === 0) return List.of(Leaf.create({}))\n    if (!decorations || decorations.length === 0) return leaves\n    if (this.text.length === 0) return leaves\n    const { key } = this\n\n    decorations.forEach(dec => {\n      const { start, end, mark } = dec\n      const hasStart = start.key == key\n      const hasEnd = end.key == key\n\n      if (hasStart && hasEnd) {\n        const index = hasStart ? start.offset : 0\n        const length = hasEnd ? end.offset - index : this.text.length - index\n\n        if (length < 1) return\n        if (index >= this.text.length) return\n\n        if (index !== 0 || length < this.text.length) {\n          const [before, bundle] = Leaf.splitLeaves(leaves, index)\n          const [middle, after] = Leaf.splitLeaves(bundle, length)\n          leaves = before.concat(middle.map(x => x.addMark(mark)), after)\n          return\n        }\n      }\n\n      leaves = leaves.map(x => x.addMark(mark))\n    })\n\n    if (leaves === this.leaves) return leaves\n    return Leaf.createLeaves(leaves)\n  }\n\n  /**\n   * Get all of the active marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getActiveMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.intersect(leaf.marks)\n      if (result && result.size === 0) return false\n      return false\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the active marks on the text\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarks() {\n    if (this.leaves.size === 0) return Set()\n\n    const result = this.leaves.first().marks\n    if (result.size === 0) return result\n\n    return result.toOrderedSet().withMutations(x => {\n      this.leaves.forEach(c => {\n        x.intersect(c.marks)\n        if (x.size === 0) return false\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.union(leaf.marks)\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    if (this.leaves.size === 0) return []\n    const first = this.leaves.first().marks\n    if (this.leaves.size === 1) return first.toArray()\n\n    const result = []\n\n    this.leaves.forEach(leaf => {\n      result.push(leaf.marks.toArray())\n    })\n\n    return Array.prototype.concat.apply(first.toArray(), result)\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   * Corner Cases:\n   *   1. if no text is before the index, and index !== 0, then return Set()\n   *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n   *   3. if index === 0, text !== '', return Set()\n   *\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    const { leaf } = this.searchLeafAtOffset(index)\n    if (!leaf) return Set()\n    return leaf.marks\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} offset\n   * @param {String} text\n   * @param {Set} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(offset, text, marks) {\n    if (this.text === '') {\n      return this.set('leaves', List.of(Leaf.create({ text, marks })))\n    }\n\n    if (text.length === 0) return this\n    if (!marks) marks = Set()\n\n    const { startOffset, leaf, index } = this.searchLeafAtOffset(offset)\n    const delta = offset - startOffset\n    const beforeText = leaf.text.slice(0, delta)\n    const afterText = leaf.text.slice(delta)\n    const { leaves } = this\n\n    if (leaf.marks.equals(marks)) {\n      return this.set(\n        'leaves',\n        leaves.set(index, leaf.set('text', beforeText + text + afterText))\n      )\n    }\n\n    const nextLeaves = leaves.splice(\n      index,\n      1,\n      leaf.set('text', beforeText),\n      Leaf.create({ text, marks }),\n      leaf.set('text', afterText)\n    )\n\n    return this.setLeaves(nextLeaves)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    if (this.text === '' && index === 0 && length === 0) {\n      const first = this.leaves.first()\n      if (!first) return this\n      const newFirst = first.removeMark(mark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.removeMark(mark)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Remove text from the text node at `start` for `length`.\n   *\n   * @param {Number} start\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(start, length) {\n    if (length <= 0) return this\n    if (start >= this.text.length) return this\n\n    // PERF: For simple backspace, we can operate directly on the leaf\n    if (length === 1) {\n      const { leaf, index, startOffset } = this.searchLeafAtOffset(start + 1)\n      const offset = start - startOffset\n\n      if (leaf) {\n        if (leaf.text.length === 1) {\n          const leaves = this.leaves.remove(index)\n          return this.setLeaves(leaves)\n        }\n\n        const beforeText = leaf.text.slice(0, offset)\n        const afterText = leaf.text.slice(offset + length)\n        const text = beforeText + afterText\n\n        if (text.length > 0) {\n          return this.set(\n            'leaves',\n            this.leaves.set(index, leaf.set('text', text))\n          )\n        }\n      }\n    }\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, start)\n    const after = Leaf.splitLeaves(bundle, length)[1]\n    const leaves = Leaf.createLeaves(before.concat(after))\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (first.text === '') {\n        return this.set(\n          'leaves',\n          List.of(first.set('marks', this.getActiveMarks()))\n        )\n      }\n    }\n\n    return this.set('leaves', leaves)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Text}\n   */\n\n  updateMark(index, length, mark, properties) {\n    const newMark = mark.merge(properties)\n\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n      if (!first) return this\n      const newFirst = first.updateMark(mark, newMark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n\n    const leaves = before.concat(\n      middle.map(x => x.updateMark(mark, newMark)),\n      after\n    )\n\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Split this text and return two different texts\n   * @param {Number} position\n   * @returns {Array<Text>}\n   */\n\n  splitText(offset) {\n    const splitted = Leaf.splitLeaves(this.leaves, offset)\n    const one = this.set('leaves', splitted[0])\n    const two = this.set('leaves', splitted[1]).regenerateKey()\n    return [one, two]\n  }\n\n  /**\n   * merge this text and another text at the end\n   * @param {Text} text\n   * @returns {Text}\n   */\n\n  mergeText(text) {\n    const leaves = this.leaves.concat(text.leaves)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Set leaves with normalized `leaves`\n   *\n   * @param {Schema} schema\n   * @returns {Text|Null}\n   */\n\n  setLeaves(leaves) {\n    const result = Leaf.createLeaves(leaves)\n\n    if (result.size === 1) {\n      const first = result.first()\n\n      if (!first.marks || first.marks.size === 0) {\n        if (first.text === '') {\n          return this.set('leaves', List())\n        }\n      }\n    }\n\n    return this.set('leaves', Leaf.createLeaves(leaves))\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, ['getActiveMarks', 'getMarks', 'getMarksAsArray'])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","import isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { List } from 'immutable'\n\nimport Block from './block'\nimport Data from './data'\nimport Document from './document'\nimport Inline from './inline'\nimport Text from './text'\n\n/**\n * A pseudo-model that is used for its static methods only.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        warning(\n          false,\n          'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n        )\n\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      warning(\n        false,\n        'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n      )\n\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return (\n      Block.isBlock(any) ||\n      Document.isDocument(any) ||\n      Inline.isInline(any) ||\n      Text.isText(any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      data: Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return block\n  }\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Mix in the changes that pass through to their at-range equivalents because\n * they don't have any effect on the selection.\n */\n\nconst PROXY_TRANSFORMS = [\n  'deleteBackward',\n  'deleteCharBackward',\n  'deleteLineBackward',\n  'deleteWordBackward',\n  'deleteForward',\n  'deleteCharForward',\n  'deleteWordForward',\n  'deleteLineForward',\n  'setBlocks',\n  'setInlines',\n  'splitInline',\n  'unwrapBlock',\n  'unwrapInline',\n  'wrapBlock',\n  'wrapInline',\n]\n\nPROXY_TRANSFORMS.forEach(method => {\n  Changes[method] = (change, ...args) => {\n    const { value } = change\n    const { selection } = value\n    const methodAtRange = `${method}AtRange`\n    change[methodAtRange](selection, ...args)\n\n    if (method.match(/Backward$/)) {\n      change.moveToStart()\n    } else if (method.match(/Forward$/)) {\n      change.moveToEnd()\n    }\n  }\n})\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMarks = (change, marks) => {\n  marks.forEach(mark => change.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Change} change\n */\n\nChanges.delete = change => {\n  const { value } = change\n  const { selection } = value\n  change.deleteAtRange(selection)\n\n  // Ensure that the selection is collapsed to the start, because in certain\n  // cases when deleting across inline nodes, when splitting the inline node the\n  // end point of the selection will end up after the split point.\n  change.moveToStart()\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Block} block\n */\n\nChanges.insertBlock = (change, block) => {\n  block = Block.create(block)\n  const { value } = change\n  const { selection } = value\n  change.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(block.key)\n  if (node) change.moveToEndOfNode(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Change} change\n * @param {Document} fragment\n */\n\nChanges.insertFragment = (change, fragment) => {\n  if (!fragment.nodes.size) return\n\n  let { value } = change\n  let { document, selection } = value\n  const { start, end } = selection\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    (start.isAtStartOfNode(startText) || end.isAtStartOfNode(startText)) ||\n    (start.isAtEndOfNode(endText) || end.isAtEndOfNode(endText))\n\n  const isInserting =\n    firstChild.hasBlockChildren() || lastChild.hasBlockChildren()\n\n  change.insertFragmentAtRange(selection, fragment)\n  value = change.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && (lastInline || isInserting)) {\n    change.select(selection.moveToEndOfNode(newText))\n  } else if (newText) {\n    change.select(\n      selection.moveToStartOfNode(newText).moveForward(lastText.text.length)\n    )\n  } else {\n    change.select(selection.moveToStart().moveForward(lastText.text.length))\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Inline} inline\n */\n\nChanges.insertInline = (change, inline) => {\n  inline = Inline.create(inline)\n  const { value } = change\n  const { selection } = value\n  change.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(inline.key)\n  if (node) change.moveToEndOfNode(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Change} change\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertText = (change, text, marks) => {\n  const { value } = change\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  change.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document != change.value.document) {\n    change.select({ marks: null })\n  }\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.removeMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\nChanges.replaceMark = (change, oldMark, newMark) => {\n  change.removeMark(oldMark)\n  change.addMark(newMark)\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Change} change\n * @param {Number} depth (optional)\n */\n\nChanges.splitBlock = (change, depth = 1) => {\n  const { value } = change\n  const { selection, document } = value\n  const marks = selection.marks || document.getInsertMarksAtRange(selection)\n  change.splitBlockAtRange(selection, depth).moveToEnd()\n\n  if (marks && marks.size !== 0) {\n    change.select({ marks })\n  }\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.toggleMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    change.removeMark(mark)\n  } else {\n    change.addMark(mark)\n  }\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Change} change\n * @param {String} prefix\n * @param {String} suffix\n */\n\nChanges.wrapText = (change, prefix, suffix = prefix) => {\n  const { value } = change\n  const { selection } = value\n  change.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    change.moveStartBackward(prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  change.moveEndBackward(suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward != change.value.selection.isForward) {\n    change.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharLength,\n  getCharOffset,\n  getCharOffsetBackward,\n  getCharOffsetForward,\n  getWordOffset,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n  isSurrogate,\n  isWord,\n}\n","import { List } from 'immutable'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport TextUtils from '../utils/text-utils'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nChanges.addMarkAtRange = (change, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = change\n  const { document } = value\n  const { start, end } = range\n  const texts = document.getTextsAtRange(range)\n\n  change.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key == start.key) index = start.offset\n      if (key == end.key) length = end.offset\n      if (key == start.key && key == end.key) length = end.offset - start.offset\n\n      change.addMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Array<Mixed>} mark\n */\n\nChanges.addMarksAtRange = (change, range, marks) => {\n  marks.forEach(mark => change.addMarkAtRange(range, mark))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteAtRange = (change, range) => {\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  change.snapshotSelection()\n\n  const { value } = change\n  const { start, end } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  let endKey = end.key\n  let endOffset = end.offset\n  let { document, schema } = value\n  let isStartVoid = document.hasVoidParent(startKey, schema)\n  let isEndVoid = document.hasVoidParent(endKey, schema)\n  let startBlock = document.getClosestBlock(startKey, schema)\n  let endBlock = document.getClosestBlock(endKey, schema)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey, schema)\n  }\n\n  change.withoutNormalizing(() => {\n    // If the start node is inside a void node, remove the void node and update\n    // the starting point to be right after it, continuously until the start point\n    // is not a void, or until the entire range is handled.\n    while (isStartVoid) {\n      const startVoid = document.getClosestVoid(startKey, schema)\n      const nextText = document.getNextText(startKey)\n      change.removeNodeByKey(startVoid.key)\n\n      // If the start and end keys are the same, we're done.\n      if (startKey == endKey) return\n\n      // If there is no next text node, we're done.\n      if (!nextText) return\n\n      // Continue...\n      document = change.value.document\n      startKey = nextText.key\n      startOffset = 0\n      isStartVoid = document.hasVoidParent(startKey, schema)\n    }\n\n    // If the end node is inside a void node, do the same thing but backwards. But\n    // we don't need any aborting checks because if we've gotten this far there\n    // must be a non-void node that will exit the loop.\n    while (isEndVoid) {\n      const endVoid = document.getClosestVoid(endKey, schema)\n      const prevText = document.getPreviousText(endKey)\n      change.removeNodeByKey(endVoid.key)\n\n      // Continue...\n      document = change.value.document\n      endKey = prevText.key\n      endOffset = prevText.text.length\n      isEndVoid = document.hasVoidParent(endKey, schema)\n    }\n\n    // If the start and end key are the same, and it was a hanging selection, we\n    // can just remove the entire block.\n    if (startKey == endKey && isHanging) {\n      change.removeNodeByKey(startBlock.key)\n      return\n    } else if (startKey == endKey) {\n      // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n      // simply remove the text in the range.\n      const index = startOffset\n      const length = endOffset - startOffset\n      change.removeTextByKey(startKey, index, length)\n      return\n    } else {\n      // Otherwise, we need to recursively remove text and nodes inside the start\n      // block after the start offset and inside the end block before the end\n      // offset. Then remove any blocks that are in between the start and end\n      // blocks. Then finally merge the start and end nodes.\n      startBlock = document.getClosestBlock(startKey)\n      endBlock = document.getClosestBlock(endKey)\n      const startText = document.getNode(startKey)\n      const endText = document.getNode(endKey)\n      const startLength = startText.text.length - startOffset\n      const endLength = endOffset\n\n      const ancestor = document.getCommonAncestor(startKey, endKey)\n      const startChild = ancestor.getFurthestAncestor(startKey)\n      const endChild = ancestor.getFurthestAncestor(endKey)\n\n      const startParent = document.getParent(startBlock.key)\n      const startParentIndex = startParent.nodes.indexOf(startBlock)\n      const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n      let child\n\n      // Iterate through all of the nodes in the tree after the start text node\n      // but inside the end child, and remove them.\n      child = startText\n\n      while (child.key != startChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const afters = parent.nodes.slice(index + 1)\n\n        afters.reverse().forEach(node => {\n          change.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove all of the middle children.\n      const startChildIndex = ancestor.nodes.indexOf(startChild)\n      const endChildIndex = ancestor.nodes.indexOf(endChild)\n      const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n      middles.reverse().forEach(node => {\n        change.removeNodeByKey(node.key)\n      })\n\n      // Remove the nodes before the end text node in the tree.\n      child = endText\n\n      while (child.key != endChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const befores = parent.nodes.slice(0, index)\n\n        befores.reverse().forEach(node => {\n          change.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove any overlapping text content from the leaf text nodes.\n      if (startLength != 0) {\n        change.removeTextByKey(startKey, startOffset, startLength)\n      }\n\n      if (endLength != 0) {\n        change.removeTextByKey(endKey, 0, endOffset)\n      }\n\n      // If the start and end blocks aren't the same, move and merge the end block\n      // into the start block.\n      if (startBlock.key != endBlock.key) {\n        document = change.value.document\n        const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n        // Move the end block to be right after the start block.\n        if (endParentIndex != startParentIndex + 1) {\n          change.moveNodeByKey(\n            endBlock.key,\n            startParent.key,\n            startParentIndex + 1\n          )\n        }\n\n        // If the selection is hanging, just remove the start block, otherwise\n        // merge the end block into it.\n        if (isHanging) {\n          change.removeNodeByKey(startBlock.key)\n        } else {\n          change.mergeNodeByKey(endBlock.key)\n        }\n\n        // If nested empty blocks are left over above the end block, remove them.\n        if (lonely) {\n          change.removeNodeByKey(lonely.key)\n        }\n      }\n    }\n  })\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteCharBackwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteLineBackwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  change.deleteBackwardAtRange(range, o)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteWordBackwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = o === 0 ? 1 : TextUtils.getWordOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nChanges.deleteBackwardAtRange = (change, range, n = 1) => {\n  if (n === 0) return\n  const { value } = change\n  const { document, schema } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, schema)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !schema.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    change.removeNodeByKey(block.key)\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtStartOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtStartOfNode(text)) {\n    const prev = document.getPreviousText(text.key)\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key, schema)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      change.removeNodeByKey(prevVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && prevBlock != block) {\n      range = range.moveAnchorTo(prev.key, prev.text.length)\n      change.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focus.offset) {\n    range = range.moveFocusBackward(n)\n    change.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focus.offset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveAnchorTo(node.key, offset)\n  change.deleteAtRange(range)\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteCharForwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteLineForwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  change.deleteForwardAtRange(range, startBlock.text.length - o)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n */\n\nChanges.deleteWordForwardAtRange = (change, range) => {\n  const { value } = change\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getWordOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nChanges.deleteForwardAtRange = (change, range, n = 1) => {\n  if (n === 0) return\n  const { value } = change\n  const { document, schema } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, schema)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !schema.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    const nextBlock = document.getNextBlock(block.key)\n    change.removeNodeByKey(block.key)\n\n    if (nextBlock && nextBlock.key) {\n      change.moveToStartOfNode(nextBlock)\n    }\n\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtEndOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtEndOfNode(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key, schema)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      change.removeNodeByKey(nextVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && nextBlock != block) {\n      range = range.moveFocusTo(next.key, 0)\n      change.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focus.offset) {\n    range = range.moveFocusForward(n)\n    change.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focus.offset\n  let traversed = text.text.length - focus.offset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveFocusTo(node.key, offset)\n  change.deleteAtRange(range)\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|String|Object} block\n */\n\nChanges.insertBlockAtRange = (change, range, block) => {\n  block = Block.create(block)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    range = range.moveToStart()\n  }\n\n  const { value } = change\n  const { document, schema } = value\n  const { start } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  const startBlock = document.getClosestBlock(startKey)\n  const startInline = document.getClosestInline(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (schema.isVoid(startBlock)) {\n    const extra = start.isAtEndOfNode(startBlock) ? 1 : 0\n    change.insertNodeByKey(parent.key, index + extra, block)\n  } else if (!startInline && startBlock.text === '') {\n    change.insertNodeByKey(parent.key, index + 1, block)\n  } else if (start.isAtStartOfNode(startBlock)) {\n    change.insertNodeByKey(parent.key, index, block)\n  } else if (start.isAtEndOfNode(startBlock)) {\n    change.insertNodeByKey(parent.key, index + 1, block)\n  } else {\n    if (startInline && schema.isVoid(startInline)) {\n      const atEnd = start.isAtEndOfNode(startInline)\n      const siblingText = atEnd\n        ? document.getNextText(startKey)\n        : document.getPreviousText(startKey)\n\n      const splitRange = atEnd\n        ? range.moveToStartOfNode(siblingText)\n        : range.moveToEndOfNode(siblingText)\n\n      startKey = splitRange.start.key\n      startOffset = splitRange.start.offset\n    }\n\n    change.withoutNormalizing(() => {\n      change.splitDescendantsByKey(startBlock.key, startKey, startOffset)\n      change.insertNodeByKey(parent.key, index + 1, block)\n    })\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Document} fragment\n */\n\nChanges.insertFragmentAtRange = (change, range, fragment) => {\n  change.withoutNormalizing(() => {\n    // If the range is expanded, delete it first.\n    if (range.isExpanded) {\n      change.deleteAtRange(range)\n\n      if (change.value.document.getDescendant(range.start.key)) {\n        range = range.moveToStart()\n      } else {\n        range = range.moveTo(range.end.key, 0).normalize(change.value.document)\n      }\n    }\n\n    // If the fragment is empty, there's nothing to do after deleting.\n    if (!fragment.nodes.size) return\n\n    // Regenerate the keys for all of the fragments nodes, so that they're\n    // guaranteed not to collide with the existing keys in the document. Otherwise\n    // they will be rengerated automatically and we won't have an easy way to\n    // reference them.\n    fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n    // Calculate a few things...\n    const { start } = range\n    const { value } = change\n    const { schema } = value\n    let { document } = value\n    let startText = document.getDescendant(start.key)\n    let startBlock = document.getClosestBlock(startText.key)\n    let startChild = startBlock.getFurthestAncestor(startText.key)\n    const isAtStart = start.isAtStartOfNode(startBlock)\n    const parent = document.getParent(startBlock.key)\n    const index = parent.nodes.indexOf(startBlock)\n    const blocks = fragment.getBlocks()\n    const firstChild = fragment.nodes.first()\n    const lastChild = fragment.nodes.last()\n    const firstBlock = blocks.first()\n    const lastBlock = blocks.last()\n\n    // If the fragment only contains a void block, use `insertBlock` instead.\n    if (firstBlock === lastBlock && schema.isVoid(firstBlock)) {\n      change.insertBlockAtRange(range, firstBlock)\n      return\n    }\n\n    // If the fragment starts or ends with single nested block, (e.g., table),\n    // do not merge this fragment with existing blocks.\n    if (firstChild.hasBlockChildren() || lastChild.hasBlockChildren()) {\n      fragment.nodes.reverse().forEach(node => {\n        change.insertBlockAtRange(range, node)\n      })\n      return\n    }\n\n    // If the first and last block aren't the same, we need to insert all of the\n    // nodes after the fragment's first block at the index.\n    if (firstBlock != lastBlock) {\n      const lonelyParent = fragment.getFurthest(\n        firstBlock.key,\n        p => p.nodes.size == 1\n      )\n      const lonelyChild = lonelyParent || firstBlock\n      const startIndex = parent.nodes.indexOf(startBlock)\n      fragment = fragment.removeNode(lonelyChild.key)\n\n      fragment.nodes.forEach((node, i) => {\n        const newIndex = startIndex + i + 1\n        change.insertNodeByKey(parent.key, newIndex, node)\n      })\n    }\n\n    // Check if we need to split the node.\n    if (start.offset != 0) {\n      change.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    // Update our variables with the new value.\n    document = change.value.document\n    startText = document.getDescendant(start.key)\n    startBlock = document.getClosestBlock(start.key)\n    startChild = startBlock.getFurthestAncestor(startText.key)\n\n    // If the first and last block aren't the same, we need to move any of the\n    // starting block's children after the split into the last block of the\n    // fragment, which has already been inserted.\n    if (firstBlock != lastBlock) {\n      const nextChild = isAtStart\n        ? startChild\n        : startBlock.getNextSibling(startChild.key)\n      const nextNodes = nextChild\n        ? startBlock.nodes.skipUntil(n => n.key == nextChild.key)\n        : List()\n      const lastIndex = lastBlock.nodes.size\n\n      nextNodes.forEach((node, i) => {\n        const newIndex = lastIndex + i\n        change.moveNodeByKey(node.key, lastBlock.key, newIndex)\n      })\n    }\n\n    // If the starting block is empty, we replace it entirely with the first block\n    // of the fragment, since this leads to a more expected behavior for the user.\n    if (!schema.isVoid(startBlock) && startBlock.text === '') {\n      change.removeNodeByKey(startBlock.key)\n      change.insertNodeByKey(parent.key, index, firstBlock)\n    } else {\n      // Otherwise, we maintain the starting block, and insert all of the first\n      // block's inline nodes into it at the split point.\n      const inlineChild = startBlock.getFurthestAncestor(startText.key)\n      const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n      firstBlock.nodes.forEach((inline, i) => {\n        const o = start.offset == 0 ? 0 : 1\n        const newIndex = inlineIndex + i + o\n        change.insertNodeByKey(startBlock.key, newIndex, inline)\n      })\n    }\n  })\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|String|Object} inline\n */\n\nChanges.insertInlineAtRange = (change, range, inline) => {\n  inline = Inline.create(inline)\n\n  change.withoutNormalizing(() => {\n    if (range.isExpanded) {\n      change.deleteAtRange(range)\n      range = range.moveToStart()\n    }\n\n    const { value } = change\n    const { document, schema } = value\n    const { start } = range\n    const parent = document.getParent(start.key)\n    const startText = document.assertDescendant(start.key)\n    const index = parent.nodes.indexOf(startText)\n\n    if (schema.isVoid(parent)) return\n\n    change.splitNodeByKey(start.key, start.offset)\n    change.insertNodeByKey(parent.key, index + 1, inline)\n  })\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertTextAtRange = (change, range, text, marks) => {\n  const { value } = change\n  const { document, schema } = value\n  const { start } = range\n  let key = start.key\n  let offset = start.offset\n  const parent = document.getParent(start.key)\n\n  if (schema.isVoid(parent)) {\n    return\n  }\n\n  change.withoutNormalizing(() => {\n    if (range.isExpanded) {\n      change.deleteAtRange(range)\n\n      // Update range start after delete\n      if (change.value.selection.start.key !== key) {\n        key = change.value.selection.start.key\n        offset = change.value.selection.start.offset\n      }\n    }\n\n    change.insertTextByKey(key, offset, text, marks)\n  })\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n */\n\nChanges.removeMarkAtRange = (change, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { start, end } = range\n\n  change.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key == start.key) index = start.offset\n      if (key == end.key) length = end.offset\n      if (key == start.key && key == end.key) length = end.offset - start.offset\n\n      change.removeMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nChanges.setBlocksAtRange = (change, range, properties) => {\n  const { value } = change\n  const { document, schema } = value\n  const blocks = document.getBlocksAtRange(range)\n\n  const { start, end, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(start.key, schema)\n  const startBlock = document.getClosestBlock(start.key)\n  const endBlock = document.getClosestBlock(end.key)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed == false &&\n    start.offset == 0 &&\n    end.offset == 0 &&\n    isStartVoid == false &&\n    start.key == startBlock.getFirstText().key &&\n    end.key == endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  change.withoutNormalizing(() => {\n    sets.forEach(block => {\n      change.setNodeByKey(block.key, properties)\n    })\n  })\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nChanges.setInlinesAtRange = (change, range, properties) => {\n  const { value } = change\n  const { document } = value\n  const inlines = document.getInlinesAtRange(range)\n\n  change.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      change.setNodeByKey(inline.key, properties)\n    })\n  })\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nChanges.splitBlockAtRange = (change, range, height = 1) => {\n  const { start, end } = range\n  let { value } = change\n  let { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  change.withoutNormalizing(() => {\n    change.splitDescendantsByKey(node.key, start.key, start.offset)\n\n    value = change.value\n    document = value.document\n\n    if (range.isExpanded) {\n      if (range.isBackward) range = range.flip()\n      const nextBlock = document.getNextBlock(node.key)\n      range = range.moveAnchorToStartOfNode(nextBlock)\n      range = range.setFocus(range.focus.setPath(null))\n\n      if (start.key === end.key) {\n        range = range.moveFocusTo(range.anchor.key, end.offset - start.offset)\n      }\n\n      range = document.resolveRange(range)\n      change.deleteAtRange(range)\n    }\n  })\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nChanges.splitInlineAtRange = (change, range, height = Infinity) => {\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    range = range.moveToStart()\n  }\n\n  const { start } = range\n  const { value } = change\n  const { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  change.splitDescendantsByKey(node.key, start.key, start.offset)\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nChanges.toggleMarkAtRange = (change, range, mark) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const { value } = change\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    change.removeMarkAtRange(range, mark)\n  } else {\n    change.addMarkAtRange(range, mark)\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nChanges.unwrapBlockAtRange = (change, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = change\n  let { document } = value\n  const blocks = document.getBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object != 'block') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  change.withoutNormalizing(() => {\n    wrappers.forEach(block => {\n      const first = block.nodes.first()\n      const last = block.nodes.last()\n      const parent = document.getParent(block.key)\n      const index = parent.nodes.indexOf(block)\n\n      const children = block.nodes.filter(child => {\n        return blocks.some(b => child == b || child.hasDescendant(b.key))\n      })\n\n      const firstMatch = children.first()\n      const lastMatch = children.last()\n\n      if (first == firstMatch && last == lastMatch) {\n        block.nodes.forEach((child, i) => {\n          change.moveNodeByKey(child.key, parent.key, index + i)\n        })\n\n        change.removeNodeByKey(block.key)\n      } else if (last == lastMatch) {\n        block.nodes.skipUntil(n => n == firstMatch).forEach((child, i) => {\n          change.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      } else if (first == firstMatch) {\n        block.nodes\n          .takeUntil(n => n == lastMatch)\n          .push(lastMatch)\n          .forEach((child, i) => {\n            change.moveNodeByKey(child.key, parent.key, index + i)\n          })\n      } else {\n        const firstText = firstMatch.getFirstText()\n\n        change.splitDescendantsByKey(block.key, firstText.key, 0)\n\n        document = change.value.document\n\n        children.forEach((child, i) => {\n          if (i == 0) {\n            const extra = child\n            child = document.getNextBlock(child.key)\n            change.removeNodeByKey(extra.key)\n          }\n\n          change.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      }\n    })\n  })\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nChanges.unwrapInlineAtRange = (change, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object != 'inline') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  change.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      const parent = change.value.document.getParent(inline.key)\n      const index = parent.nodes.indexOf(inline)\n\n      inline.nodes.forEach((child, i) => {\n        change.moveNodeByKey(child.key, parent.key, index + i)\n      })\n\n      change.removeNodeByKey(inline.key)\n    })\n  })\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|Object|String} block\n */\n\nChanges.wrapBlockAtRange = (change, range, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { value } = change\n  const { document } = value\n\n  const blocks = document.getBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 == p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node == firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node == lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  change.withoutNormalizing(() => {\n    // Inject the new block node into the parent.\n    change.insertNodeByKey(parent.key, index, block)\n\n    // Move the sibling nodes into the new block node.\n    siblings.forEach((node, i) => {\n      change.moveNodeByKey(node.key, block.key, i)\n    })\n  })\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|Object|String} inline\n */\n\nChanges.wrapInlineAtRange = (change, range, inline) => {\n  const { value } = change\n  let { document, schema } = value\n  const { start, end } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(start.key)\n\n    if (!schema.isVoid(inlineParent)) {\n      return\n    }\n\n    return change.wrapInlineByKey(inlineParent.key, inline)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(start.key)\n  let endBlock = document.getClosestBlock(end.key)\n  const startInline = document.getClosestInline(start.key)\n  const endInline = document.getClosestInline(end.key)\n  let startChild = startBlock.getFurthestAncestor(start.key)\n  let endChild = endBlock.getFurthestAncestor(end.key)\n\n  change.withoutNormalizing(() => {\n    if (!startInline || startInline != endInline) {\n      change.splitDescendantsByKey(endChild.key, end.key, end.offset)\n      change.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    document = change.value.document\n    startBlock = document.getDescendant(startBlock.key)\n    endBlock = document.getDescendant(endBlock.key)\n    startChild = startBlock.getFurthestAncestor(start.key)\n    endChild = endBlock.getFurthestAncestor(end.key)\n    const startIndex = startBlock.nodes.indexOf(startChild)\n    const endIndex = endBlock.nodes.indexOf(endChild)\n\n    if (startInline && startInline == endInline) {\n      const text = startBlock\n        .getTextsAtRange(range)\n        .get(0)\n        .splitText(start.offset)[1]\n        .splitText(end.offset - start.offset)[0]\n\n      inline = inline.set('nodes', List([text]))\n      change.insertInlineAtRange(range, inline)\n\n      const inlinekey = inline.getFirstText().key\n      const rng = {\n        anchor: {\n          key: inlinekey,\n          offset: 0,\n        },\n        focus: {\n          key: inlinekey,\n          offset: end.offset - start.offset,\n        },\n        isFocused: true,\n      }\n      change.select(rng)\n    } else if (startBlock == endBlock) {\n      document = change.value.document\n      startBlock = document.getClosestBlock(start.key)\n      startChild = startBlock.getFurthestAncestor(start.key)\n\n      const startInner = document.getNextSibling(startChild.key)\n      const startInnerIndex = startBlock.nodes.indexOf(startInner)\n      const endInner =\n        start.key == end.key\n          ? startInner\n          : startBlock.getFurthestAncestor(end.key)\n      const inlines = startBlock.nodes\n        .skipUntil(n => n == startInner)\n        .takeUntil(n => n == endInner)\n        .push(endInner)\n\n      const node = inline.regenerateKey()\n\n      change.insertNodeByKey(startBlock.key, startInnerIndex, node)\n\n      inlines.forEach((child, i) => {\n        change.moveNodeByKey(child.key, node.key, i)\n      })\n    } else {\n      const startInlines = startBlock.nodes.slice(startIndex + 1)\n      const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n      const startNode = inline.regenerateKey()\n      const endNode = inline.regenerateKey()\n\n      change.insertNodeByKey(startBlock.key, startIndex + 1, startNode)\n      change.insertNodeByKey(endBlock.key, endIndex, endNode)\n\n      startInlines.forEach((child, i) => {\n        change.moveNodeByKey(child.key, startNode.key, i)\n      })\n\n      endInlines.forEach((child, i) => {\n        change.moveNodeByKey(child.key, endNode.key, i)\n      })\n\n      blocks.slice(1, -1).forEach(block => {\n        const node = inline.regenerateKey()\n        change.insertNodeByKey(block.key, 0, node)\n\n        block.nodes.forEach((child, i) => {\n          change.moveNodeByKey(child.key, node.key, i)\n        })\n      })\n    }\n  })\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n */\n\nChanges.wrapTextAtRange = (change, range, prefix, suffix = prefix) => {\n  const { start, end } = range\n  const startRange = range.moveToStart()\n  let endRange = range.moveToEnd()\n\n  if (start.key == end.key) {\n    endRange = endRange.moveForward(prefix.length)\n  }\n\n  change.withoutNormalizing(() => {\n    change.insertTextAtRange(startRange, prefix, [])\n    change.insertTextAtRange(endRange, suffix, [])\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import { List } from 'immutable'\n\n/**\n * Compare paths `path` and `b` to see which is before or after.\n *\n * @param {List} path\n * @param {List} b\n * @return {Number|Null}\n */\n\nfunction compare(path, target) {\n  // PERF: if the paths are not the same size we can exit early.\n  if (path.size !== target.size) return null\n\n  for (let i = 0; i < path.size; i++) {\n    const pv = path.get(i)\n    const tv = target.get(i)\n\n    // If the path's value is ever less than the target's, it's before.\n    if (pv < tv) return -1\n\n    // If the target's value is ever less than the path's, it's after.\n    if (pv > tv) return 1\n  }\n\n  // Otherwise they were equal the whole way, it's the same.\n  return 0\n}\n\n/**\n * Create a path from `attrs`.\n *\n * @param {Array|List} attrs\n * @return {List}\n */\n\nfunction create(attrs) {\n  if (attrs == null) {\n    return null\n  }\n\n  if (List.isList(attrs)) {\n    return attrs\n  }\n\n  if (Array.isArray(attrs)) {\n    return List(attrs)\n  }\n\n  throw new Error(\n    `Paths can only be created from arrays or lists, but you passed: ${attrs}`\n  )\n}\n\n/**\n * Crop paths `a` and `b` to an equal size, defaulting to the shortest.\n *\n * @param {List} a\n * @param {List} b\n */\n\nfunction crop(a, b, size = min(a, b)) {\n  const ca = a.slice(0, size)\n  const cb = b.slice(0, size)\n  return [ca, cb]\n}\n\n/**\n * Decrement a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction decrement(path, n = 1, index = path.size - 1) {\n  return increment(path, 0 - n, index)\n}\n\n/**\n * Increment a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction increment(path, n = 1, index = path.size - 1) {\n  const value = path.get(index)\n  const newValue = value + n\n  const newPath = path.set(index, newValue)\n  return newPath\n}\n\n/**\n * Is a `path` above another `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAbove(path, target) {\n  const [p, t] = crop(path, target)\n  return path.size < target.size && compare(p, t) === 0\n}\n\n/**\n * Is a `path` after another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAfter(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === 1\n}\n\n/**\n * Is a `path` before another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isBefore(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === -1\n}\n\n/**\n * Is a `path` equal to another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isEqual(path, target) {\n  return path.equals(target)\n}\n\n/**\n * Is a `path` older than a `target` path? Meaning that it ends as an older\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isOlder(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl > tl\n}\n\n/**\n * Is a `path` a sibling of a `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isSibling(path, target) {\n  if (path.size !== target.size) return false\n  const p = path.butLast()\n  const t = target.butLast()\n  return p.equals(t)\n}\n\n/**\n * Is a `path` younger than a `target` path? Meaning that it ends as a younger\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isYounger(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl < tl\n}\n\n/**\n * Lift a `path` to refer to its parent.\n *\n * @param {List} path\n * @return {Array}\n */\n\nfunction lift(path) {\n  const parent = path.slice(0, -1)\n  return parent\n}\n\n/**\n * Get the maximum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction max(a, b) {\n  const n = Math.max(a.size, b.size)\n  return n\n}\n\n/**\n * Get the minimum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction min(a, b) {\n  const n = Math.min(a.size, b.size)\n  return n\n}\n\n/**\n * Get the common ancestor path of path `a` and path `b`.\n *\n * @param {List} a\n * @param {List} b\n * @return {List}\n */\n\nfunction relate(a, b) {\n  const array = []\n\n  for (let i = 0; i < a.size && i < b.size; i++) {\n    const av = a.get(i)\n    const bv = b.get(i)\n\n    // If the values aren't equal, they've diverged and don't share an ancestor.\n    if (av !== bv) break\n\n    // Otherwise, the current value is still a common ancestor.\n    array.push(av)\n  }\n\n  const path = create(array)\n  return path\n}\n\n/**\n * Transform a `path` by an `operation`, adjusting it to stay current.\n *\n * @param {List} path\n * @param {Operation} operation\n * @return {List<List>}\n */\n\nfunction transform(path, operation) {\n  const { type, position, path: p } = operation\n\n  if (\n    type === 'add_mark' ||\n    type === 'insert_text' ||\n    type === 'remove_mark' ||\n    type === 'remove_text' ||\n    type === 'set_mark' ||\n    type === 'set_node' ||\n    type === 'set_selection' ||\n    type === 'set_value' ||\n    path.size === 0\n  ) {\n    return List([path])\n  }\n\n  const pIndex = p.size - 1\n  const pEqual = isEqual(p, path)\n  const pYounger = isYounger(p, path)\n  const pAbove = isAbove(p, path)\n\n  if (type === 'insert_node') {\n    if (pEqual || pYounger || pAbove) {\n      path = increment(path, 1, pIndex)\n    }\n  }\n\n  if (type === 'remove_node') {\n    if (pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pEqual || pAbove) {\n      path = []\n    }\n  }\n\n  if (type === 'merge_node') {\n    if (pEqual || pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pAbove) {\n      path = decrement(path, 1, pIndex)\n      path = increment(path, position, pIndex + 1)\n    }\n  }\n\n  if (type === 'split_node') {\n    if (pEqual) {\n      path = [path, increment(path)]\n    } else if (pYounger) {\n      path = increment(path, 1, pIndex)\n    } else if (pAbove) {\n      if (path.get(pIndex + 1) >= position) {\n        path = increment(path, 1, pIndex)\n        path = decrement(path, position, pIndex + 1)\n      }\n    }\n  }\n\n  if (type === 'move_node') {\n    const { newPath: np } = operation\n    const npIndex = np.size - 1\n    const npEqual = isEqual(np, path)\n    const npYounger = isYounger(np, path)\n    const npAbove = isAbove(np, path)\n\n    if (pAbove) {\n      path = np.concat(path.slice(p.size))\n    } else {\n      if (pEqual) {\n        path = np\n      } else if (pYounger) {\n        path = decrement(path, 1, pIndex)\n      }\n\n      if (npEqual || npYounger || npAbove) {\n        path = increment(path, 1, npIndex)\n      }\n    }\n  }\n\n  const paths = Array.isArray(path) ? path : [path]\n  return List(paths)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  compare,\n  create,\n  crop,\n  decrement,\n  increment,\n  isAbove,\n  isAfter,\n  isBefore,\n  isEqual,\n  isOlder,\n  isSibling,\n  isYounger,\n  lift,\n  max,\n  min,\n  relate,\n  transform,\n}\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n */\n\nChanges.addMarkByPath = (change, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} index\n * @param {Fragment} fragment\n */\n\nChanges.insertFragmentByPath = (change, path, index, fragment) => {\n  fragment.nodes.forEach((node, i) => {\n    change.insertNodeByPath(path, index + i, node)\n  })\n}\n\n/**\n * Insert a `node` at `index` in a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} index\n * @param {Node} node\n */\n\nChanges.insertNodeByPath = (change, path, index, node) => {\n  const { value } = change\n\n  change.applyOperation({\n    type: 'insert_node',\n    value,\n    path: path.concat(index),\n    node,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertTextByPath = (change, path, offset, text, marks) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  change.applyOperation({\n    type: 'insert_text',\n    value,\n    path,\n    offset,\n    text,\n    marks,\n  })\n}\n\n/**\n * Merge a node by `path` with the previous node.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.mergeNodeByPath = (change, path) => {\n  const { value } = change\n  const { document } = value\n  const original = document.getDescendant(path)\n  const previous = document.getPreviousSibling(path)\n\n  if (!previous) {\n    throw new Error(\n      `Unable to merge node with path \"${path}\", because it has no previous sibling.`\n    )\n  }\n\n  const position =\n    previous.object == 'text' ? previous.text.length : previous.nodes.size\n\n  change.applyOperation({\n    type: 'merge_node',\n    value,\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n}\n\n/**\n * Move a node by `path` to a new parent by `newPath` and `index`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {String} newPath\n * @param {Number} index\n */\n\nChanges.moveNodeByPath = (change, path, newPath, newIndex) => {\n  const { value } = change\n\n  change.applyOperation({\n    type: 'move_node',\n    value,\n    path,\n    newPath: newPath.concat(newIndex),\n  })\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nChanges.removeMarkByPath = (change, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n}\n\n/**\n * Remove all `marks` from node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.removeAllMarksByPath = (change, path) => {\n  const { state } = change\n  const { document } = state\n  const node = document.assertNode(path)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      change.removeMarkByKey(text.key, 0, text.text.length, mark)\n    })\n  })\n}\n\n/**\n * Remove a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.removeNodeByPath = (change, path) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n\n  change.applyOperation({\n    type: 'remove_node',\n    value,\n    path,\n    node,\n  })\n}\n\n/**\n * Remove text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n */\n\nChanges.removeTextByPath = (change, path, offset, length) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      value,\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  change.applyOperations(removals.reverse())\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|Node} node\n */\n\nChanges.replaceNodeByPath = (change, path, newNode) => {\n  newNode = Node.create(newNode)\n  const index = path.last()\n  const parentPath = PathUtils.lift(path)\n\n  change.withoutNormalizing(() => {\n    change.removeNodeByPath(path)\n    change.insertNodeByPath(parentPath, index, newNode)\n  })\n}\n\n/**\n * Replace A Length of Text with another string or text\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.replaceTextByPath = (change, path, offset, length, text, marks) => {\n  const { document } = change.value\n  const node = document.assertNode(path)\n\n  if (length + offset > node.text.length) {\n    length = node.text.length - offset\n  }\n\n  const range = document.createRange({\n    anchor: { path, offset },\n    focus: { path, offset: offset + length },\n  })\n\n  let activeMarks = document.getActiveMarksAtRange(range)\n\n  change.withoutNormalizing(() => {\n    change.removeTextByPath(path, offset, length)\n\n    if (!marks) {\n      // Do not use mark at index when marks and activeMarks are both empty\n      marks = activeMarks ? activeMarks : []\n    } else if (activeMarks) {\n      // Do not use `has` because we may want to reset marks like font-size with\n      // an updated data;\n      activeMarks = activeMarks.filter(\n        activeMark => !marks.find(m => activeMark.type === m.type)\n      )\n\n      marks = activeMarks.merge(marks)\n    }\n\n    change.insertTextByPath(path, offset, text, marks)\n  })\n}\n\n/**\n * Set `properties` on mark on text at `offset` and `length` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nChanges.setMarkByPath = (change, path, offset, length, mark, properties) => {\n  mark = Mark.create(mark)\n  properties = Mark.createProperties(properties)\n  const { value } = change\n\n  change.applyOperation({\n    type: 'set_mark',\n    value,\n    path,\n    offset,\n    length,\n    mark,\n    properties,\n  })\n}\n\n/**\n * Set `properties` on a node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nChanges.setNodeByPath = (change, path, properties) => {\n  properties = Node.createProperties(properties)\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n\n  change.applyOperation({\n    type: 'set_node',\n    value,\n    path,\n    node,\n    properties,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.setTextByPath = (change, path, text, marks) => {\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const end = node.text.length\n  change.replaceTextByPath(path, 0, end, text, marks)\n}\n\n/**\n * Split a node by `path` at `position`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Number} position\n * @param {Object} options\n */\n\nChanges.splitNodeByPath = (change, path, position, options = {}) => {\n  const { target = null } = options\n  const { value } = change\n  const { document } = value\n  const node = document.getDescendant(path)\n\n  change.applyOperation({\n    type: 'split_node',\n    value,\n    path,\n    position,\n    target,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n  })\n}\n\n/**\n * Split a node deeply down the tree by `path`, `textPath` and `textOffset`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Array} textPath\n * @param {Number} textOffset\n */\n\nChanges.splitDescendantsByPath = (change, path, textPath, textOffset) => {\n  if (path.equals(textPath)) {\n    change.splitNodeByPath(textPath, textOffset)\n    return\n  }\n\n  const { value } = change\n  const { document } = value\n  const node = document.assertNode(path)\n  const text = document.assertNode(textPath)\n  const ancestors = document.getAncestors(textPath)\n  const nodes = ancestors\n    .skipUntil(a => a.key == node.key)\n    .reverse()\n    .unshift(text)\n\n  let previous\n  let index\n\n  change.withoutNormalizing(() => {\n    nodes.forEach(n => {\n      const prevIndex = index == null ? null : index\n      index = previous ? n.nodes.indexOf(previous) + 1 : textOffset\n      previous = n\n      change.splitNodeByKey(n.key, index, { target: prevIndex })\n    })\n  })\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nChanges.unwrapInlineByPath = (change, path, properties) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  change.unwrapInlineAtRange(range, properties)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nChanges.unwrapBlockByPath = (change, path, properties) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  change.unwrapBlockAtRange(range, properties)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Change} change\n * @param {Array} path\n */\n\nChanges.unwrapNodeByPath = (change, path) => {\n  const { value } = change\n  const { document } = value\n  document.assertNode(path)\n\n  const parentPath = PathUtils.lift(path)\n  const parent = document.assertNode(parentPath)\n  const index = path.last()\n  const parentIndex = parentPath.last()\n  const grandPath = PathUtils.lift(parentPath)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  change.withoutNormalizing(() => {\n    if (parent.nodes.size === 1) {\n      change.moveNodeByPath(path, grandPath, parentIndex + 1)\n      change.removeNodeByPath(parentPath)\n    } else if (isFirst) {\n      change.moveNodeByPath(path, grandPath, parentIndex)\n    } else if (isLast) {\n      change.moveNodeByPath(path, grandPath, parentIndex + 1)\n    } else {\n      let updatedPath = PathUtils.increment(path, 1, parentPath.size - 1)\n      updatedPath = updatedPath.set(updatedPath.size - 1, 0)\n      change.splitNodeByPath(parentPath, index)\n      change.moveNodeByPath(updatedPath, grandPath, parentIndex + 1)\n    }\n  })\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Block|Object|String} block\n */\n\nChanges.wrapBlockByPath = (change, path, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  change.withoutNormalizing(() => {\n    change.insertNodeByPath(parentPath, index, block)\n    change.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Block|Object|String} inline\n */\n\nChanges.wrapInlineByPath = (change, path, inline) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  change.withoutNormalizing(() => {\n    change.insertNodeByPath(parentPath, index, inline)\n    change.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node by `path` with `node`.\n *\n * @param {Change} change\n * @param {Array} path\n * @param {Node|Object} node\n */\n\nChanges.wrapNodeByPath = (change, path, node) => {\n  node = Node.create(node)\n\n  if (node.object === 'block') {\n    change.wrapBlockByPath(path, node)\n  } else if (node.object === 'inline') {\n    change.wrapInlineByPath(path, node)\n  }\n}\n\n/**\n * Mix in `*ByKey` variants.\n */\n\nconst CHANGES = [\n  'addMark',\n  'insertFragment',\n  'insertNode',\n  'insertText',\n  'mergeNode',\n  'removeMark',\n  'removeAllMarks',\n  'removeNode',\n  'setText',\n  'replaceText',\n  'removeText',\n  'replaceNode',\n  'setMark',\n  'setNode',\n  'splitNode',\n  'unwrapInline',\n  'unwrapBlock',\n  'unwrapNode',\n  'wrapBlock',\n  'wrapInline',\n  'wrapNode',\n]\n\nfor (const method of CHANGES) {\n  Changes[`${method}ByKey`] = (change, key, ...args) => {\n    const { value } = change\n    const { document } = value\n    const path = document.assertPath(key)\n    change[`${method}ByPath`](path, ...args)\n  }\n}\n\n// Moving nodes takes two keys, so it's slightly different.\nChanges.moveNodeByKey = (change, key, newKey, ...args) => {\n  const { value } = change\n  const { document } = value\n  const path = document.assertPath(key)\n  const newPath = document.assertPath(newKey)\n  change.moveNodeByPath(path, newPath, ...args)\n}\n\n// Splitting descendants takes two keys, so it's slightly different.\nChanges.splitDescendantsByKey = (change, key, textKey, ...args) => {\n  const { value } = change\n  const { document } = value\n  const path = document.assertPath(key)\n  const textPath = document.assertPath(textKey)\n  change.splitDescendantsByPath(path, textPath, ...args)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import omit from 'lodash/omit'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Change} change\n */\n\nChanges.redo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const next = redos.peek()\n  if (!next) return\n\n  // Shift the next value into the undo stack.\n  redos = redos.pop()\n  undos = undos.push(next)\n\n  // Replay the next operations.\n  next.forEach(op => {\n    const { type, properties } = op\n\n    // When the operation mutates the selection, omit its `isFocused` value to\n    // prevent the editor focus from changing during redoing.\n    if (type == 'set_selection') {\n      op = op.set('properties', omit(properties, 'isFocused'))\n    }\n\n    change.withoutSaving(() => {\n      change.applyOperation(op)\n    })\n  })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Change} change\n */\n\nChanges.undo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const previous = undos.peek()\n  if (!previous) return\n\n  // Shift the previous operations into the redo stack.\n  undos = undos.pop()\n  redos = redos.push(previous)\n\n  // Replay the inverse of the previous operations.\n  previous\n    .slice()\n    .reverse()\n    .map(op => op.invert())\n    .forEach(inverse => {\n      const { type, properties } = inverse\n\n      // When the operation mutates the selection, omit its `isFocused` value to\n      // prevent the editor focus from changing during undoing.\n      if (type == 'set_selection') {\n        inverse = inverse.set('properties', omit(properties, 'isFocused'))\n      }\n\n      change.withoutSaving(() => {\n        change.applyOperation(inverse)\n      })\n    })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  key: undefined,\n  offset: undefined,\n  path: undefined,\n}\n\n/**\n * Point.\n *\n * @type {Point}\n */\n\nclass Point extends Record(DEFAULTS) {\n  /**\n   * Create a new `Point` with `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Point}\n   */\n\n  static create(attrs = {}) {\n    if (Point.isPoint(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Point.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Point.create\\` only accepts objects or points, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable point properties from `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Point.isPoint(a)) {\n      return {\n        key: a.key,\n        offset: a.offset,\n        path: a.path,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('key' in a) p.key = a.key\n      if ('offset' in a) p.offset = a.offset\n      if ('path' in a) p.path = PathUtils.create(a.path)\n\n      // If only a path is set, or only a key is set, ensure that the other is\n      // set to null so that it can be normalized back to the right value.\n      // Otherwise we won't realize that the path and key don't match anymore.\n      if ('path' in a && !('key' in a)) p.key = null\n      if ('key' in a && !('path' in a)) p.path = null\n\n      return p\n    }\n\n    throw new Error(\n      `\\`Point.createProperties\\` only accepts objects or points, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Point` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Point}\n   */\n\n  static fromJSON(object) {\n    const { key = null, offset = null, path = null } = object\n\n    const point = new Point({\n      key,\n      offset,\n      path: PathUtils.create(path),\n    })\n\n    return point\n  }\n\n  /**\n   * Check whether all properties of the point are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.key != null && this.offset != null && this.path != null\n  }\n\n  /**\n   * Check whether any property of the point is not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Check whether the point is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOfNode(node) {\n    if (this.isUnset) return false\n    const last = node.getLastText()\n    const is = this.key === last.key && this.offset === last.text.length\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOfNode(node) {\n    if (this.isUnset) return false\n\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.offset != 0) return false\n\n    const first = node.getFirstText()\n    const is = this.key === first.key\n    return is\n  }\n\n  /**\n   * Check whether the point is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isInNode(node) {\n    if (this.isUnset) return false\n    if (node.object === 'text' && node.key === this.key) return true\n    if (node.hasNode(this.key)) return true\n    return false\n  }\n\n  /**\n   * Move the point's offset backward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveBackward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveForward(-n)\n    const point = this.setOffset(this.offset - n)\n    return point\n  }\n\n  /**\n   * Move the point's offset forward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveForward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveBackward(-n)\n    const point = this.setOffset(this.offset + n)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String|Number} path\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  moveTo(path, offset = 0) {\n    let key = this.key\n\n    if (typeof path === 'number') {\n      offset = path\n      path = this.path\n    } else if (typeof path === 'string') {\n      key = path\n      path = key === this.key ? this.path : null\n    } else {\n      key = path.equals(this.path) ? this.key : null\n    }\n\n    const point = this.merge({ key, path, offset })\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToStartOfNode(node) {\n    const first = node.getFirstText()\n    const point = this.moveTo(first.key, 0)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToEndOfNode(node) {\n    const last = node.getLastText()\n    const point = this.moveTo(last.key, last.text.length)\n    return point\n  }\n\n  /**\n   * Normalize the point relative to a `node`, ensuring that its key and path\n   * reference a text node, or that it gets unset.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  normalize(node) {\n    // If both the key and path are null, there's no reference to a node, so\n    // make sure it is entirely unset.\n    if (this.key == null && this.path == null) {\n      return this.setOffset(null)\n    }\n\n    const { key, offset, path } = this\n    const target = node.getNode(key || path)\n\n    if (!target) {\n      warning(false, \"A point's `path` or `key` invalid and was reset!\")\n\n      const text = node.getFirstText()\n      if (!text) return Point.create()\n\n      const point = this.merge({\n        key: text.key,\n        offset: 0,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target.object !== 'text') {\n      warning(false, 'A point should not reference a non-text node!')\n\n      const text = target.getTextAtOffset(offset)\n      const before = target.getOffset(text.key)\n      const point = this.merge({\n        offset: offset - before,\n        key: text.key,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target && path && key && key !== target.key) {\n      warning(false, \"A point's `key` did not match its `path`!\")\n    }\n\n    const point = this.merge({\n      key: target.key,\n      path: path == null ? node.getPath(target.key) : path,\n      offset: offset == null ? 0 : Math.min(offset, target.text.length),\n    })\n\n    return point\n  }\n\n  /**\n   * Set the point's key to a new `key`.\n   *\n   * @param {String} key\n   * @return {Point}\n   */\n\n  setKey(key) {\n    if (key !== null) {\n      key = KeyUtils.create(key)\n    }\n\n    const point = this.set('key', key)\n    return point\n  }\n\n  /**\n   * Set the point's offset to a new `offset`.\n   *\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  setOffset(offset) {\n    const point = this.set('offset', offset)\n    return point\n  }\n\n  /**\n   * Set the point's path to a new `path`.\n   *\n   * @param {List|Array} path\n   * @return {Point}\n   */\n\n  setPath(path) {\n    if (path !== null) {\n      path = PathUtils.create(path)\n    }\n\n    const point = this.set('path', path)\n    return point\n  }\n\n  /**\n   * Return a JSON representation of the point.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      key: this.key,\n      offset: this.offset,\n      path: this.path && this.path.toArray(),\n    }\n\n    if (!options.preserveKeys) {\n      delete object.key\n    }\n\n    return object\n  }\n\n  /**\n   * Unset the point.\n   *\n   * @return {Point}\n   */\n\n  unset() {\n    return this.merge({\n      key: null,\n      offset: null,\n      path: null,\n    })\n  }\n}\n\n/**\n * Export.\n *\n * @type {Point}\n */\n\nexport default Point\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  mark: undefined,\n}\n\n/**\n * Decoration.\n *\n * @type {Decoration}\n */\n\nclass Decoration extends Record(DEFAULTS) {\n  /**\n   * Create a new `Decoration` with `attrs`.\n   *\n   * @param {Object|Decoration} attrs\n   * @return {Decoration}\n   */\n\n  static create(attrs = {}) {\n    if (Decoration.isDecoration(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Decoration.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Decoration.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Decoration.create\\` only accepts objects or decorations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Decoration|Object>|List<Decoration|Object>} elements\n   * @return {List<Decoration>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Decoration.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Decoration.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable decoration properties from `attrs`.\n   *\n   * @param {Object|String|Decoration} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Decoration.isDecoration(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        mark: Mark.create(a.mark),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('mark' in a) p.mark = Mark.create(a.mark)\n      return p\n    }\n\n    throw new Error(\n      `\\`Decoration.createProperties\\` only accepts objects or decorations, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Decoration` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Decoration}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, mark } = object\n\n    if (!mark) {\n      throw new Error(\n        `Decorations must be created with a \\`mark\\`, but you passed: ${JSON.stringify(\n          object\n        )}`\n      )\n    }\n\n    const decoration = new Decoration({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      mark: Mark.fromJSON(mark),\n    })\n\n    return decoration\n  }\n\n  /**\n   * Set new `properties` on the decoration.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Decoration.createProperties(properties)\n    const { anchor, focus, mark } = properties\n    const props = {}\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    if (mark) {\n      props.mark = Mark.create(mark)\n    }\n\n    const decoration = this.merge(props)\n    return decoration\n  }\n\n  /**\n   * Return a JSON representation of the decoration.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      mark: this.mark.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Decoration}\n */\n\nexport default Decoration\n","/**\n * Slate-specific object types.\n *\n * @type {Object}\n */\n\nexport const TYPES = {\n  block: '@@__SLATE_BLOCK__@@',\n  change: '@@__SLATE_CHANGE__@@',\n  decoration: '@@__SLATE_DECORATION__@@',\n  document: '@@__SLATE_DOCUMENT__@@',\n  history: '@@__SLATE_HISTORY__@@',\n  inline: '@@__SLATE_INLINE__@@',\n  leaf: '@@__SLATE_LEAF__@@',\n  mark: '@@__SLATE_MARK__@@',\n  operation: '@@__SLATE_OPERATION__@@',\n  point: '@@__SLATE_POINT__@@',\n  range: '@@__SLATE_RANGE__@@',\n  schema: '@@__SLATE_SCHEMA__@@',\n  selection: '@@__SLATE_SELECTION__@@',\n  stack: '@@__SLATE_STACK__@@',\n  text: '@@__SLATE_TEXT__@@',\n  value: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Determine whether a `value` is of `type`.\n *\n * @param {string} type\n * @param {any} value\n * @return {boolean}\n */\n\nexport default function isObject(type, value) {\n  return !!(value && value[TYPES[type]])\n}\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Decoration from './decoration'\nimport Point from './point'\nimport Selection from './selection'\nimport isObject from '../utils/is-object'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      if (attrs.object === 'range') {\n        return attrs\n      } else {\n        return Range.fromJSON(Range.createProperties(attrs))\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      return p\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects, decorations, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus } = object\n    const range = new Range({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n    })\n\n    return range\n  }\n\n  /**\n   * Check if a `value` is a `Range`, or is range-like.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isRange(value) {\n    return (\n      isObject('range', value) ||\n      Decoration.isDecoration(value) ||\n      Selection.isSelection(value)\n    )\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  isFocused: undefined,\n  marks: undefined,\n}\n\n/**\n * Selection.\n *\n * @type {Selection}\n */\n\nclass Selection extends Record(DEFAULTS) {\n  /**\n   * Create a new `Selection` with `attrs`.\n   *\n   * @param {Object|Selection} attrs\n   * @return {Selection}\n   */\n\n  static create(attrs = {}) {\n    if (Selection.isSelection(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Selection.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Selection.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Selection.create\\` only accepts objects, ranges or selections, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable selection properties from `attrs`.\n   *\n   * @param {Object|String|Selection} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Selection.isSelection(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        isFocused: a.isFocused,\n        marks: a.marks,\n      }\n    }\n\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('isFocused' in a) p.isFocused = a.isFocused\n      if ('marks' in a)\n        p.marks = a.marks == null ? null : Mark.createSet(a.marks)\n      return p\n    }\n\n    throw new Error(\n      `\\`Selection.createProperties\\` only accepts objects, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Selection` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Selection}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, isFocused = false, marks = null } = object\n    const selection = new Selection({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return selection\n  }\n\n  /**\n   * Check whether the selection is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Set the `isFocused` property to a new `value`.\n   *\n   * @param {Boolean} value\n   * @return {Selection}\n   */\n\n  setIsFocused(value) {\n    const selection = this.set('isFocused', value)\n    return selection\n  }\n\n  /**\n   * Set the `marks` property to a new set of `marks`.\n   *\n   * @param {Set} marks\n   * @return {Selection}\n   */\n\n  setMarks(marks) {\n    const selection = this.set('marks', marks)\n    return selection\n  }\n\n  /**\n   * Set new `properties` on the selection.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Selection.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const selection = this.merge(props)\n    return selection\n  }\n\n  /**\n   * Return a JSON representation of the selection.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Selection}\n */\n\nexport default Selection\n","import { is } from 'immutable'\nimport pick from 'lodash/pick'\n\nimport Selection from '../models/selection'\n\nconst Changes = {}\n\nChanges.blur = change => {\n  change.select({ isFocused: false })\n}\n\nChanges.deselect = change => {\n  const range = Selection.create()\n  change.select(range)\n}\n\nChanges.focus = change => {\n  change.select({ isFocused: true })\n}\n\nChanges.flip = change => {\n  change.call(proxy, 'flip')\n}\n\nChanges.moveAnchorBackward = (change, ...args) => {\n  change.call(pointBackward, 'anchor', ...args)\n}\n\nChanges.moveAnchorForward = (change, ...args) => {\n  change.call(pointForward, 'anchor', ...args)\n}\n\nChanges.moveAnchorTo = (change, ...args) => {\n  change.call(proxy, 'moveAnchorTo', ...args)\n}\n\nChanges.moveAnchorToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'anchor', 'end', 'block')\n}\n\nChanges.moveAnchorToEndOfInline = change => {\n  change.call(pointEdgeObject, 'anchor', 'end', 'inline')\n}\n\nChanges.moveAnchorToEndOfDocument = change => {\n  change.moveAnchorToEndOfNode(change.value.document).moveToAnchor()\n}\n\nChanges.moveAnchorToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'next', 'block')\n}\n\nChanges.moveAnchorToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'next', 'inline')\n}\n\nChanges.moveAnchorToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'next', 'text')\n}\n\nChanges.moveAnchorToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveAnchorToEndOfNode', ...args)\n}\n\nChanges.moveAnchorToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'previous', 'block')\n}\n\nChanges.moveAnchorToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'previous', 'inline')\n}\n\nChanges.moveAnchorToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'end', 'previous', 'text')\n}\n\nChanges.moveAnchorToEndOfText = change => {\n  change.call(pointEdgeObject, 'anchor', 'end', 'text')\n}\n\nChanges.moveAnchorToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'anchor', 'start', 'block')\n}\n\nChanges.moveAnchorToStartOfDocument = change => {\n  change.moveAnchorToStartOfNode(change.value.document).moveToAnchor()\n}\n\nChanges.moveAnchorToStartOfInline = change => {\n  change.call(pointEdgeObject, 'anchor', 'start', 'inline')\n}\n\nChanges.moveAnchorToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'next', 'block')\n}\n\nChanges.moveAnchorToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'next', 'inline')\n}\n\nChanges.moveAnchorToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'next', 'text')\n}\n\nChanges.moveAnchorToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveAnchorToStartOfNode', ...args)\n}\n\nChanges.moveAnchorToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'previous', 'block')\n}\n\nChanges.moveAnchorToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'previous', 'inline')\n}\n\nChanges.moveAnchorToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'anchor', 'start', 'previous', 'text')\n}\n\nChanges.moveAnchorToStartOfText = change => {\n  change.call(pointEdgeObject, 'anchor', 'start', 'text')\n}\n\nChanges.moveBackward = (change, ...args) => {\n  change.moveAnchorBackward(...args).moveFocusBackward(...args)\n}\n\nChanges.moveEndBackward = (change, ...args) => {\n  change.call(pointBackward, 'end', ...args)\n}\n\nChanges.moveEndForward = (change, ...args) => {\n  change.call(pointForward, 'end', ...args)\n}\n\nChanges.moveEndTo = (change, ...args) => {\n  change.call(proxy, 'moveEndTo', ...args)\n}\n\nChanges.moveEndToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'end', 'end', 'block')\n}\n\nChanges.moveEndToEndOfDocument = change => {\n  change.moveEndToEndOfNode(change.value.document).moveToEnd()\n}\n\nChanges.moveEndToEndOfInline = change => {\n  change.call(pointEdgeObject, 'end', 'end', 'inline')\n}\n\nChanges.moveEndToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'next', 'block')\n}\n\nChanges.moveEndToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'next', 'inline')\n}\n\nChanges.moveEndToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'next', 'text')\n}\n\nChanges.moveEndToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveEndToEndOfNode', ...args)\n}\n\nChanges.moveEndToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'previous', 'block')\n}\n\nChanges.moveEndToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'previous', 'inline')\n}\n\nChanges.moveEndToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'end', 'end', 'previous', 'text')\n}\n\nChanges.moveEndToEndOfText = change => {\n  change.call(pointEdgeObject, 'end', 'end', 'text')\n}\n\nChanges.moveEndToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'end', 'start', 'block')\n}\n\nChanges.moveEndToStartOfDocument = change => {\n  change.moveEndToStartOfNode(change.value.document).moveToEnd()\n}\n\nChanges.moveEndToStartOfInline = change => {\n  change.call(pointEdgeObject, 'end', 'start', 'inline')\n}\n\nChanges.moveEndToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'next', 'block')\n}\n\nChanges.moveEndToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'next', 'inline')\n}\n\nChanges.moveEndToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'next', 'text')\n}\n\nChanges.moveEndToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveEndToStartOfNode', ...args)\n}\n\nChanges.moveEndToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'previous', 'block')\n}\n\nChanges.moveEndToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'previous', 'inline')\n}\n\nChanges.moveEndToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'end', 'start', 'previous', 'text')\n}\n\nChanges.moveEndToStartOfText = change => {\n  change.call(pointEdgeObject, 'end', 'start', 'text')\n}\n\nChanges.moveFocusBackward = (change, ...args) => {\n  change.call(pointBackward, 'focus', ...args)\n}\n\nChanges.moveFocusForward = (change, ...args) => {\n  change.call(pointForward, 'focus', ...args)\n}\n\nChanges.moveFocusTo = (change, ...args) => {\n  change.call(proxy, 'moveFocusTo', ...args)\n}\n\nChanges.moveFocusToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'focus', 'end', 'block')\n}\n\nChanges.moveFocusToEndOfDocument = change => {\n  change.moveFocusToEndOfNode(change.value.document).moveToFocus()\n}\n\nChanges.moveFocusToEndOfInline = change => {\n  change.call(pointEdgeObject, 'focus', 'end', 'inline')\n}\n\nChanges.moveFocusToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'next', 'block')\n}\n\nChanges.moveFocusToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'next', 'inline')\n}\n\nChanges.moveFocusToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'next', 'text')\n}\n\nChanges.moveFocusToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveFocusToEndOfNode', ...args)\n}\n\nChanges.moveFocusToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'previous', 'block')\n}\n\nChanges.moveFocusToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'previous', 'inline')\n}\n\nChanges.moveFocusToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'end', 'previous', 'text')\n}\n\nChanges.moveFocusToEndOfText = change => {\n  change.call(pointEdgeObject, 'focus', 'end', 'text')\n}\n\nChanges.moveFocusToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'focus', 'start', 'block')\n}\n\nChanges.moveFocusToStartOfDocument = change => {\n  change.moveFocusToStartOfNode(change.value.document).moveToFocus()\n}\n\nChanges.moveFocusToStartOfInline = change => {\n  change.call(pointEdgeObject, 'focus', 'start', 'inline')\n}\n\nChanges.moveFocusToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'next', 'block')\n}\n\nChanges.moveFocusToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'next', 'inline')\n}\n\nChanges.moveFocusToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'next', 'text')\n}\n\nChanges.moveFocusToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveFocusToStartOfNode', ...args)\n}\n\nChanges.moveFocusToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'previous', 'block')\n}\n\nChanges.moveFocusToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'previous', 'inline')\n}\n\nChanges.moveFocusToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'focus', 'start', 'previous', 'text')\n}\n\nChanges.moveFocusToStartOfText = change => {\n  change.call(pointEdgeObject, 'focus', 'start', 'text')\n}\n\nChanges.moveForward = (change, ...args) => {\n  change.moveAnchorForward(...args).moveFocusForward(...args)\n}\n\nChanges.moveStartBackward = (change, ...args) => {\n  change.call(pointBackward, 'start', ...args)\n}\n\nChanges.moveStartForward = (change, ...args) => {\n  change.call(pointForward, 'start', ...args)\n}\n\nChanges.moveStartTo = (change, ...args) => {\n  change.call(proxy, 'moveStartTo', ...args)\n}\n\nChanges.moveStartToEndOfBlock = change => {\n  change.call(pointEdgeObject, 'start', 'end', 'block')\n}\n\nChanges.moveStartToEndOfDocument = change => {\n  change.moveStartToEndOfNode(change.value.document).moveToStart()\n}\n\nChanges.moveStartToEndOfInline = change => {\n  change.call(pointEdgeObject, 'start', 'end', 'inline')\n}\n\nChanges.moveStartToEndOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'next', 'block')\n}\n\nChanges.moveStartToEndOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'next', 'inline')\n}\n\nChanges.moveStartToEndOfNextText = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'next', 'text')\n}\n\nChanges.moveStartToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveStartToEndOfNode', ...args)\n}\n\nChanges.moveStartToEndOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'previous', 'block')\n}\n\nChanges.moveStartToEndOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'previous', 'inline')\n}\n\nChanges.moveStartToEndOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'start', 'end', 'previous', 'text')\n}\n\nChanges.moveStartToEndOfText = change => {\n  change.call(pointEdgeObject, 'start', 'end', 'text')\n}\n\nChanges.moveStartToStartOfBlock = change => {\n  change.call(pointEdgeObject, 'start', 'start', 'block')\n}\n\nChanges.moveStartToStartOfDocument = change => {\n  change.moveStartToStartOfNode(change.value.document).moveToStart()\n}\n\nChanges.moveStartToStartOfInline = change => {\n  change.call(pointEdgeObject, 'start', 'start', 'inline')\n}\n\nChanges.moveStartToStartOfNextBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'next', 'block')\n}\n\nChanges.moveStartToStartOfNextInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'next', 'inline')\n}\n\nChanges.moveStartToStartOfNextText = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'next', 'text')\n}\n\nChanges.moveStartToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveStartToStartOfNode', ...args)\n}\n\nChanges.moveStartToStartOfPreviousBlock = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'previous', 'block')\n}\n\nChanges.moveStartToStartOfPreviousInline = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'previous', 'inline')\n}\n\nChanges.moveStartToStartOfPreviousText = change => {\n  change.call(pointEdgeSideObject, 'start', 'start', 'previous', 'text')\n}\n\nChanges.moveStartToStartOfText = change => {\n  change.call(pointEdgeObject, 'start', 'start', 'text')\n}\n\nChanges.moveTo = (change, ...args) => {\n  change.call(proxy, 'moveTo', ...args)\n}\n\nChanges.moveToAnchor = change => {\n  change.call(proxy, 'moveToAnchor')\n}\n\nChanges.moveToEnd = change => {\n  change.call(proxy, 'moveToEnd')\n}\n\nChanges.moveToEndOfBlock = change => {\n  change.moveEndToEndOfBlock().moveToEnd()\n}\n\nChanges.moveToEndOfDocument = change => {\n  change.moveEndToEndOfNode(change.value.document).moveToEnd()\n}\n\nChanges.moveToEndOfInline = change => {\n  change.moveEndToEndOfInline().moveToEnd()\n}\n\nChanges.moveToEndOfNextBlock = change => {\n  change.moveEndToEndOfNextBlock().moveToEnd()\n}\n\nChanges.moveToEndOfNextInline = change => {\n  change.moveEndToEndOfNextInline().moveToEnd()\n}\n\nChanges.moveToEndOfNextText = change => {\n  change.moveEndToEndOfNextText().moveToEnd()\n}\n\nChanges.moveToEndOfNode = (change, ...args) => {\n  change.call(proxy, 'moveToEndOfNode', ...args)\n}\n\nChanges.moveToEndOfPreviousBlock = change => {\n  change.moveStartToEndOfPreviousBlock().moveToStart()\n}\n\nChanges.moveToEndOfPreviousInline = change => {\n  change.moveStartToEndOfPreviousInline().moveToStart()\n}\n\nChanges.moveToEndOfPreviousText = change => {\n  change.moveStartToEndOfPreviousText().moveToStart()\n}\n\nChanges.moveToEndOfText = change => {\n  change.moveEndToEndOfText().moveToEnd()\n}\n\nChanges.moveToFocus = change => {\n  change.call(proxy, 'moveToFocus')\n}\n\nChanges.moveToRangeOfDocument = change => {\n  change.moveToRangeOfNode(change.value.document)\n}\n\nChanges.moveToRangeOfNode = (change, ...args) => {\n  change.call(proxy, 'moveToRangeOfNode', ...args)\n}\n\nChanges.moveToStart = change => {\n  change.call(proxy, 'moveToStart')\n}\n\nChanges.moveToStartOfBlock = change => {\n  change.moveStartToStartOfBlock().moveToStart()\n}\n\nChanges.moveToStartOfDocument = change => {\n  change.moveStartToStartOfNode(change.value.document).moveToStart()\n}\n\nChanges.moveToStartOfInline = change => {\n  change.moveStartToStartOfInline().moveToStart()\n}\n\nChanges.moveToStartOfNextBlock = change => {\n  change.moveEndToStartOfNextBlock().moveToEnd()\n}\n\nChanges.moveToStartOfNextInline = change => {\n  change.moveEndToStartOfNextInline().moveToEnd()\n}\n\nChanges.moveToStartOfNextText = change => {\n  change.moveEndToStartOfNextText().moveToEnd()\n}\n\nChanges.moveToStartOfNode = (change, ...args) => {\n  change.call(proxy, 'moveToStartOfNode', ...args)\n}\n\nChanges.moveToStartOfPreviousBlock = change => {\n  change.moveStartToStartOfPreviousBlock().moveToStart()\n}\n\nChanges.moveToStartOfPreviousInline = change => {\n  change.moveStartToStartOfPreviousInline().moveToStart()\n}\n\nChanges.moveToStartOfPreviousText = change => {\n  change.moveStartToStartOfPreviousText().moveToStart()\n}\n\nChanges.moveToStartOfText = change => {\n  change.moveStartToStartOfText().moveToStart()\n}\n\nChanges.select = (change, properties, options = {}) => {\n  properties = Selection.createProperties(properties)\n  const { snapshot = false } = options\n  const { value } = change\n  const { document, selection } = value\n  const props = {}\n  let next = selection.setProperties(properties)\n  next = document.resolveSelection(next)\n\n  // Re-compute the properties, to ensure that we get their normalized values.\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot === true || !is(properties[k], selection[k])) {\n      props[k] = properties[k]\n    }\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties change the marks in some way.\n  if (selection.marks && !props.marks && (props.anchor || props.focus)) {\n    props.marks = null\n  }\n\n  // If there are no new properties to set, abort to avoid extra operations.\n  if (Object.keys(props).length === 0) {\n    return\n  }\n\n  change.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: props,\n      selection: selection.toJSON(),\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\nChanges.setAnchor = (change, ...args) => {\n  change.call(proxy, 'setAnchor', ...args)\n}\n\nChanges.setEnd = (change, ...args) => {\n  change.call(proxy, 'setEnd', ...args)\n}\n\nChanges.setFocus = (change, ...args) => {\n  change.call(proxy, 'setFocus', ...args)\n}\n\nChanges.setStart = (change, ...args) => {\n  change.call(proxy, 'setStart', ...args)\n}\n\nChanges.snapshotSelection = change => {\n  change.withoutMerging(c =>\n    c.select(change.value.selection, { snapshot: true })\n  )\n}\n\n/**\n * Helpers.\n */\n\nfunction proxy(change, method, ...args) {\n  const range = change.value.selection[method](...args)\n  change.select(range)\n}\n\nfunction pointEdgeObject(change, point, edge, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object == 'text' ? 'getNode' : `getClosest${Object}`\n  const { value } = change\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  change[method](node)\n}\n\nfunction pointEdgeSideObject(change, point, edge, side, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Side = side.slice(0, 1).toUpperCase() + side.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object == 'text' ? 'getNode' : `getClosest${Object}`\n  const getDirectionNode = `get${Side}${Object}`\n  const { value } = change\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  const target = document[getDirectionNode](node.key)\n  if (!target) return\n  change[method](target)\n}\n\nfunction pointBackward(change, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointForward(change, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = change\n  const { document, selection, schema } = value\n  const p = selection[point]\n  const hasVoidParent = document.hasVoidParent(p.path, schema)\n\n  // what is this?\n  if (!hasVoidParent && p.offset - n >= 0) {\n    const range = selection[`move${Point}Backward`](n)\n    change.select(range)\n    return\n  }\n\n  const previous = document.getPreviousText(p.path)\n  if (!previous) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(previous.key)\n  const isPreviousInVoid =\n    previous && document.hasVoidParent(previous.key, schema)\n  change[`move${Point}ToEndOfNode`](previous)\n\n  // when is this called?\n  if (!hasVoidParent && !isPreviousInVoid && isInBlock) {\n    const range = change.value.selection[`move${Point}Backward`](n)\n    change.select(range)\n  }\n}\n\nfunction pointForward(change, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointBackward(change, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = change\n  const { document, selection, schema } = value\n  const p = selection[point]\n  const text = document.getNode(p.path)\n  const hasVoidParent = document.hasVoidParent(p.path, schema)\n\n  // what is this?\n  if (!hasVoidParent && p.offset + n <= text.text.length) {\n    const range = selection[`move${Point}Forward`](n)\n    change.select(range)\n    return\n  }\n\n  const next = document.getNextText(p.path)\n  if (!next) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(next.key)\n  const isNextInVoid = document.hasVoidParent(next.key, schema)\n  change[`move${Point}ToStartOfNode`](next)\n\n  // when is this called?\n  if (!hasVoidParent && !isNextInVoid && isInBlock) {\n    const range = change.value.selection[`move${Point}Forward`](n)\n    change.select(range)\n  }\n}\n\nexport default Changes\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport { List, Record, Stack } from 'immutable'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:history')\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  redos: undefined,\n  undos: undefined,\n}\n\n/**\n * History.\n *\n * @type {History}\n */\n\nclass History extends Record(DEFAULTS) {\n  /**\n   * Create a new `History` with `attrs`.\n   *\n   * @param {Object|History} attrs\n   * @return {History}\n   */\n\n  static create(attrs = {}) {\n    if (History.isHistory(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return History.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`History.create\\` only accepts objects or histories, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `operations`.\n   *\n   * @param {Array<Object>|List<Object>} operations\n   * @return {List<Object>}\n   */\n\n  static createOperationsList(operations = []) {\n    if (List.isList(operations)) {\n      return operations\n    }\n\n    if (Array.isArray(operations)) {\n      return new List(operations)\n    }\n\n    throw new Error(\n      `\\`History.createList\\` only accepts arrays or lists, but you passed it: ${operations}`\n    )\n  }\n\n  /**\n   * Create a `History` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {History}\n   */\n\n  static fromJSON(object) {\n    const { redos = [], undos = [] } = object\n\n    const history = new History({\n      redos: new Stack(redos.map(this.createOperationsList)),\n      undos: new Stack(undos.map(this.createOperationsList)),\n    })\n\n    return history\n  }\n\n  /**\n   * Save an `operation` into the history.\n   *\n   * @param {Object} operation\n   * @param {Object} options\n   * @return {History}\n   */\n\n  save(operation, options = {}) {\n    let history = this\n    let { undos, redos } = history\n    let { merge, skip } = options\n\n    if (skip) {\n      return history\n    }\n\n    const prevBatch = undos.peek()\n    const prevOperation = prevBatch && prevBatch.last()\n\n    if (merge == null) {\n      merge = shouldMerge(operation, prevOperation)\n    }\n\n    debug('save', { operation, merge })\n\n    // If the `merge` flag is true, add the operation to the previous batch.\n    if (merge && prevBatch) {\n      const batch = prevBatch.push(operation)\n      undos = undos.pop()\n      undos = undos.push(batch)\n    } else {\n      // Otherwise, create a new batch with the operation.\n      const batch = new List([operation])\n      undos = undos.push(batch)\n    }\n\n    // Constrain the history to 100 entries for memory's sake.\n    if (undos.size > 100) {\n      undos = undos.take(100)\n    }\n\n    // Clear the redos and update the history.\n    redos = redos.clear()\n    history = history.set('undos', undos).set('redos', redos)\n    return history\n  }\n\n  /**\n   * Return a JSON representation of the history.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      redos: this.redos.toJSON(),\n      undos: this.undos.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type == 'set_selection' && p.type == 'set_selection') ||\n    (o.type == 'insert_text' &&\n      p.type == 'insert_text' &&\n      o.offset == p.offset + p.text.length &&\n      o.path.equals(p.path)) ||\n    (o.type == 'remove_text' &&\n      p.type == 'remove_text' &&\n      o.offset + o.text.length == p.offset &&\n      o.path.equals(p.path))\n\n  return merge\n}\n\n/**\n * Export.\n *\n * @type {History}\n */\n\nexport default History\n","import { Record } from 'immutable'\n\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  plugins: undefined,\n}\n\n/**\n * Stack.\n *\n * @type {Stack}\n */\n\nclass Stack extends Record(DEFAULTS) {\n  /**\n   * Constructor.\n   *\n   * @param {Object} attrs\n   */\n\n  static create(attrs = {}) {\n    const { plugins = [] } = attrs\n    const stack = new Stack({ plugins })\n    return stack\n  }\n\n  /**\n   * Get all plugins with `property`.\n   *\n   * @param {String} property\n   * @return {Array}\n   */\n\n  getPluginsWith(property) {\n    return this.plugins.filter(plugin => plugin[property] != null)\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning the first non-null value.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  find(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return ret\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning all the non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   * @return {Array}\n   */\n\n  map(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n    const array = []\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) array.push(ret)\n    }\n\n    return array\n  }\n\n  /**\n   * Iterate the plugins with `property`, breaking on any a non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  run(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, reducing to a set of React children.\n   *\n   * @param {String} property\n   * @param {Object} props\n   * @param {Any} ...args\n   */\n\n  render(property, props, ...args) {\n    const plugins = this.getPluginsWith(property)\n    return plugins.reduceRight((children, plugin) => {\n      if (!plugin[property]) return children\n      const ret = plugin[property](props, ...args)\n      if (ret == null) return children\n      props.children = ret\n      return ret\n    }, props.children === undefined ? null : props.children)\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Stack.prototype, ['getPluginsWith'])\n\n/**\n * Export.\n *\n * @type {Stack}\n */\n\nexport default Stack\n","/**\n * Define a Slate error.\n *\n * @type {SlateError}\n */\n\nclass SlateError extends Error {\n  constructor(code, attrs = {}) {\n    super(code)\n    this.code = code\n\n    for (const key in attrs) {\n      this[key] = attrs[key]\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {SlateError}\n */\n\nexport default SlateError\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport { Record } from 'immutable'\n\nimport Stack from './stack'\nimport Text from './text'\nimport SlateError from '../utils/slate-error'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:schema')\n\n/**\n * Define the core schema rules, order-sensitive.\n *\n * @type {Array}\n */\n\nconst CORE_RULES = [\n  // Only allow block nodes in documents.\n  {\n    match: { object: 'document' },\n    nodes: [\n      {\n        match: { object: 'block' },\n      },\n    ],\n  },\n\n  // Only allow block nodes or inline and text nodes in blocks.\n  {\n    match: {\n      object: 'block',\n      first: { object: 'block' },\n    },\n    nodes: [\n      {\n        match: { object: 'block' },\n      },\n    ],\n  },\n  {\n    match: {\n      object: 'block',\n      first: [{ object: 'inline' }, { object: 'text' }],\n    },\n    nodes: [\n      {\n        match: [{ object: 'inline' }, { object: 'text' }],\n      },\n    ],\n  },\n\n  // Only allow inline and text nodes in inlines.\n  {\n    match: { object: 'inline' },\n    nodes: [{ match: [{ object: 'inline' }, { object: 'text' }] }],\n  },\n\n  // Ensure that block and inline nodes have at least one text child.\n  {\n    match: [{ object: 'block' }, { object: 'inline' }],\n    nodes: [{ min: 1 }],\n    normalize: (change, error) => {\n      const { code, node } = error\n      if (code !== 'child_required') return\n      change.insertNodeByKey(node.key, 0, Text.create(), { normalize: false })\n    },\n  },\n\n  // Ensure that inline nodes are surrounded by text nodes.\n  {\n    match: { object: 'block' },\n    first: [{ object: 'block' }, { object: 'text' }],\n    last: [{ object: 'block' }, { object: 'text' }],\n    normalize: (change, error) => {\n      const { code, node } = error\n      const text = Text.create()\n      let i\n\n      if (code === 'first_child_object_invalid') {\n        i = 0\n      } else if (code === 'last_child_object_invalid') {\n        i = node.nodes.size\n      } else {\n        return\n      }\n\n      change.insertNodeByKey(node.key, i, text, { normalize: false })\n    },\n  },\n  {\n    match: { object: 'inline' },\n    first: [{ object: 'block' }, { object: 'text' }],\n    last: [{ object: 'block' }, { object: 'text' }],\n    previous: [{ object: 'block' }, { object: 'text' }],\n    next: [{ object: 'block' }, { object: 'text' }],\n    normalize: (change, error) => {\n      const { code, node, index } = error\n      const text = Text.create()\n      let i\n\n      if (code === 'first_child_object_invalid') {\n        i = 0\n      } else if (code === 'last_child_object_invalid') {\n        i = node.nodes.size\n      } else if (code === 'previous_sibling_object_invalid') {\n        i = index\n      } else if (code === 'next_sibling_object_invalid') {\n        i = index + 1\n      } else {\n        return\n      }\n\n      change.insertNodeByKey(node.key, i, text, { normalize: false })\n    },\n  },\n\n  // Merge adjacent text nodes.\n  {\n    match: { object: 'text' },\n    next: [{ object: 'block' }, { object: 'inline' }],\n    normalize: (change, error) => {\n      const { code, next } = error\n      if (code !== 'next_sibling_object_invalid') return\n      change.mergeNodeByKey(next.key, { normalize: false })\n    },\n  },\n]\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  stack: undefined,\n  rules: undefined,\n}\n\n/**\n * Schema.\n *\n * @type {Schema}\n */\n\nclass Schema extends Record(DEFAULTS) {\n  /**\n   * Create a new `Schema` with `attrs`.\n   *\n   * @param {Object|Schema} attrs\n   * @return {Schema}\n   */\n\n  static create(attrs = {}) {\n    if (Schema.isSchema(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Schema.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Schema.create\\` only accepts objects or schemas, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Schema` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Schema}\n   */\n\n  static fromJSON(object) {\n    if (Schema.isSchema(object)) {\n      return object\n    }\n\n    const plugins = object.plugins ? object.plugins : [{ schema: object }]\n    let rules = [...CORE_RULES]\n\n    for (const plugin of plugins) {\n      const { schema = {} } = plugin\n      const { blocks = {}, inlines = {}, marks = {} } = schema\n\n      if (schema.rules) {\n        rules = rules.concat(schema.rules)\n      }\n\n      if (schema.document) {\n        rules.push({\n          match: [{ object: 'document' }],\n          ...schema.document,\n        })\n      }\n\n      for (const key in blocks) {\n        rules.push({\n          match: [{ object: 'block', type: key }],\n          ...blocks[key],\n        })\n      }\n\n      for (const key in inlines) {\n        rules.push({\n          match: [{ object: 'inline', type: key }],\n          ...inlines[key],\n        })\n      }\n\n      for (const key in marks) {\n        rules.push({\n          match: [{ object: 'mark', type: key }],\n          ...marks[key],\n        })\n      }\n    }\n\n    const stack = Stack.create({ plugins })\n    const ret = new Schema({ stack, rules })\n    return ret\n  }\n\n  /**\n   * Get the schema rules for a `node`.\n   *\n   * @param {Node} node\n   * @return {Array}\n   */\n\n  getNodeRules(node) {\n    const rules = this.rules.filter(r => testRules(node, r.match))\n    return rules\n  }\n\n  /**\n   * Validate a `node` with the schema, returning an error if it's invalid.\n   *\n   * @param {Node} node\n   * @return {Error|Void}\n   */\n\n  validateNode(node) {\n    const rules = this.getNodeRules(node)\n    const failure = validateRules(node, rules, this.rules, { every: true })\n    if (!failure) return\n    const error = new SlateError(failure.code, failure)\n    return error\n  }\n\n  /**\n   * Test whether a `node` is valid against the schema.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  testNode(node) {\n    const error = this.validateNode(node)\n    return !error\n  }\n\n  /**\n   * Assert that a `node` is valid against the schema.\n   *\n   * @param {Node} node\n   * @throws\n   */\n\n  assertNode(node) {\n    const error = this.validateNode(node)\n    if (error) throw error\n  }\n\n  /**\n   * Normalize a `node` with the schema, returning a function that will fix the\n   * invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @return {Function|Void}\n   */\n\n  normalizeNode(node) {\n    const ret = this.stack.find('normalizeNode', node)\n    if (ret) return ret\n    if (node.object == 'text') return\n\n    const error = this.validateNode(node)\n    if (!error) return\n\n    return change => {\n      debug(`normalizing`, { error })\n      const { rule } = error\n      const { size } = change.operations\n\n      // First run the user-provided `normalize` function if one exists...\n      if (rule.normalize) {\n        rule.normalize(change, error)\n      }\n\n      // If the `normalize` function did not add any operations to the change\n      // object, it can't have normalized, so run the default one.\n      if (change.operations.size === size) {\n        defaultNormalize(change, error)\n      }\n    }\n  }\n\n  /**\n   * Check if a mark is void.\n   *\n   * @param {Mark}\n   * @return {Boolean}\n   */\n\n  isAtomic(mark) {\n    const rule = this.rules.find(\n      r => 'isAtomic' in r && testRules(mark, r.match)\n    )\n\n    return rule ? rule.isAtomic : false\n  }\n\n  /**\n   * Check if a node is void.\n   *\n   * @param {Node}\n   * @return {Boolean}\n   */\n\n  isVoid(node) {\n    const rule = this.rules.find(r => 'isVoid' in r && testRules(node, r.match))\n    return rule ? rule.isVoid : false\n  }\n\n  /**\n   * Return a JSON representation of the schema.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      rules: this.rules,\n    }\n\n    return object\n  }\n}\n\n/**\n * Normalize an invalid value with `error` with default remedies.\n *\n * @param {Change} change\n * @param {SlateError} error\n */\n\nfunction defaultNormalize(change, error) {\n  const { code, node, child, next, previous, key, mark } = error\n\n  switch (code) {\n    case 'child_object_invalid':\n    case 'child_type_invalid':\n    case 'child_unknown':\n    case 'first_child_object_invalid':\n    case 'first_child_type_invalid':\n    case 'last_child_object_invalid':\n    case 'last_child_type_invalid': {\n      return child.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.removeNodeByKey(child.key, { normalize: false })\n    }\n\n    case 'previous_sibling_object_invalid':\n    case 'previous_sibling_type_invalid': {\n      return previous.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.removeNodeByKey(previous.key, { normalize: false })\n    }\n\n    case 'next_sibling_object_invalid':\n    case 'next_sibling_type_invalid': {\n      return next.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.removeNodeByKey(next.key, { normalize: false })\n    }\n\n    case 'child_required':\n    case 'node_text_invalid':\n    case 'parent_object_invalid':\n    case 'parent_type_invalid': {\n      return node.object === 'document'\n        ? node.nodes.forEach(n =>\n            change.removeNodeByKey(n.key, { normalize: false })\n          )\n        : change.removeNodeByKey(node.key, { normalize: false })\n    }\n\n    case 'node_data_invalid': {\n      return node.data.get(key) === undefined && node.object !== 'document'\n        ? change.removeNodeByKey(node.key, { normalize: false })\n        : change.setNodeByKey(\n            node.key,\n            { data: node.data.delete(key) },\n            { normalize: false }\n          )\n    }\n\n    case 'node_mark_invalid': {\n      return node.getTexts().forEach(t =>\n        change.removeMarkByKey(t.key, 0, t.text.length, mark, {\n          normalize: false,\n        })\n      )\n    }\n\n    default: {\n      return change.removeNodeByKey(node.key, { normalize: false })\n    }\n  }\n}\n\n/**\n * Check that an `object` matches one of a set of `rules`.\n *\n * @param {Mixed} object\n * @param {Object|Array} rules\n * @return {Boolean}\n */\n\nfunction testRules(object, rules) {\n  const error = validateRules(object, rules)\n  return !error\n}\n\n/**\n * Validate that a `object` matches a `rule` object or array.\n *\n * @param {Mixed} object\n * @param {Object|Array} rule\n * @param {Array|Void} rules\n * @return {Error|Void}\n */\n\nfunction validateRules(object, rule, rules, options = {}) {\n  const { every = false } = options\n\n  if (Array.isArray(rule)) {\n    const array = rule.length ? rule : [{}]\n    let first\n\n    for (const r of array) {\n      const error = validateRules(object, r, rules)\n      first = first || error\n      if (every && error) return error\n      if (!every && !error) return\n    }\n\n    return first\n  }\n\n  const error =\n    validateObject(object, rule) ||\n    validateType(object, rule) ||\n    validateData(object, rule) ||\n    validateMarks(object, rule) ||\n    validateText(object, rule) ||\n    validateFirst(object, rule) ||\n    validateLast(object, rule) ||\n    validateNodes(object, rule, rules)\n\n  return error\n}\n\nfunction validateObject(node, rule) {\n  if (rule.object == null) return\n  if (rule.object === node.object) return\n  if (typeof rule.object === 'function' && rule.object(node.object)) return\n  return fail('node_object_invalid', { rule, node })\n}\n\nfunction validateType(node, rule) {\n  if (rule.type == null) return\n  if (rule.type === node.type) return\n  if (typeof rule.type === 'function' && rule.type(node.type)) return\n  return fail('node_type_invalid', { rule, node })\n}\n\nfunction validateData(node, rule) {\n  if (rule.data == null) return\n  if (node.data == null) return\n\n  if (typeof rule.data === 'function') {\n    if (rule.data(node.data)) return\n    return fail('node_data_invalid', { rule, node })\n  }\n\n  for (const key in rule.data) {\n    const fn = rule.data[key]\n    const value = node.data && node.data.get(key)\n    const valid = typeof fn === 'function' ? fn(value) : fn === value\n    if (valid) continue\n    return fail('node_data_invalid', { rule, node, key, value })\n  }\n}\n\nfunction validateMarks(node, rule) {\n  if (rule.marks == null) return\n  const marks = node.getMarks().toArray()\n\n  for (const mark of marks) {\n    const valid = rule.marks.some(\n      def =>\n        typeof def.type === 'function'\n          ? def.type(mark.type)\n          : def.type === mark.type\n    )\n    if (valid) continue\n    return fail('node_mark_invalid', { rule, node, mark })\n  }\n}\n\nfunction validateText(node, rule) {\n  if (rule.text == null) return\n  const { text } = node\n  const valid =\n    typeof rule.text === 'function' ? rule.text(text) : rule.text.test(text)\n  if (valid) return\n  return fail('node_text_invalid', { rule, node, text })\n}\n\nfunction validateFirst(node, rule) {\n  if (rule.first == null) return\n  const first = node.nodes.first()\n  if (!first) return\n  const error = validateRules(first, rule.first)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = first\n  error.code = error.code.replace('node_', 'first_child_')\n  return error\n}\n\nfunction validateLast(node, rule) {\n  if (rule.last == null) return\n  const last = node.nodes.last()\n  if (!last) return\n  const error = validateRules(last, rule.last)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = last\n  error.code = error.code.replace('node_', 'last_child_')\n  return error\n}\n\nfunction validateNodes(node, rule, rules = []) {\n  if (node.nodes == null) return\n\n  const children = node.nodes.toArray()\n  const defs = rule.nodes != null ? rule.nodes.slice() : []\n  let offset\n  let min\n  let index\n  let def\n  let max\n  let child\n  let previous\n  let next\n\n  function nextDef() {\n    offset = offset == null ? null : 0\n    def = defs.shift()\n    min = def && def.min\n    max = def && def.max\n    return !!def\n  }\n\n  function nextChild() {\n    index = index == null ? 0 : index + 1\n    offset = offset == null ? 0 : offset + 1\n    previous = child\n    child = children[index]\n    next = children[index + 1]\n    if (max != null && offset == max) nextDef()\n    return !!child\n  }\n\n  function rewind() {\n    offset -= 1\n    index -= 1\n  }\n\n  if (rule.nodes != null) {\n    nextDef()\n  }\n\n  while (nextChild()) {\n    const err =\n      validateParent(node, child, rules) ||\n      validatePrevious(node, child, previous, index, rules) ||\n      validateNext(node, child, next, index, rules)\n\n    if (err) return err\n\n    if (rule.nodes != null) {\n      if (!def) {\n        return fail('child_unknown', { rule, node, child, index })\n      }\n\n      if (def.match) {\n        const error = validateRules(child, def.match)\n\n        if (error && offset >= min && nextDef()) {\n          rewind()\n          continue\n        }\n\n        if (error) {\n          error.rule = rule\n          error.node = node\n          error.child = child\n          error.index = index\n          error.code = error.code.replace('node_', 'child_')\n          return error\n        }\n      }\n    }\n  }\n\n  if (rule.nodes != null) {\n    while (min != null) {\n      if (offset < min) {\n        return fail('child_required', { rule, node, index })\n      }\n\n      nextDef()\n    }\n  }\n}\n\nfunction validateParent(node, child, rules) {\n  for (const rule of rules) {\n    if (rule.parent == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(node, rule.parent)\n    if (!error) continue\n\n    error.rule = rule\n    error.parent = node\n    error.node = child\n    error.code = error.code.replace('node_', 'parent_')\n    return error\n  }\n}\n\nfunction validatePrevious(node, child, previous, index, rules) {\n  if (!previous) return\n\n  for (const rule of rules) {\n    if (rule.previous == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(previous, rule.previous)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.previous = previous\n    error.code = error.code.replace('node_', 'previous_sibling_')\n    return error\n  }\n}\n\nfunction validateNext(node, child, next, index, rules) {\n  if (!next) return\n\n  for (const rule of rules) {\n    if (rule.next == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(next, rule.next)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.next = next\n    error.code = error.code.replace('node_', 'next_sibling_')\n    return error\n  }\n}\n\n/**\n * Create an interim failure object with `code` and `attrs`.\n *\n * @param {String} code\n * @param {Object} attrs\n * @return {Object}\n */\n\nfunction fail(code, attrs) {\n  return { code, ...attrs }\n}\n\n/**\n * Export.\n *\n * @type {Schema}\n */\n\nexport default Schema\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set, List } from 'immutable'\n\nimport PathUtils from '../utils/path-utils'\nimport Change from './change'\nimport Data from './data'\nimport Decoration from './decoration'\nimport Document from './document'\nimport History from './history'\nimport Schema from './schema'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  decorations: undefined,\n  document: undefined,\n  history: undefined,\n  schema: undefined,\n  selection: undefined,\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs, options)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Value.isValue(a)) {\n      return {\n        data: a.data,\n        decorations: a.decorations,\n        schema: a.schema,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('data' in a) p.data = Data.create(a.data)\n      if ('decorations' in a)\n        p.decorations = Decoration.createList(a.decorations)\n      if ('schema' in a) p.schema = Schema.create(a.schema)\n      return p\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let {\n      data = {},\n      decorations = [],\n      document = {},\n      selection = {},\n      schema = {},\n      history = {},\n    } = object\n\n    data = Data.fromJSON(data)\n    schema = Schema.fromJSON(schema)\n    history = History.fromJSON(history)\n    document = Document.fromJSON(document)\n    selection = document.createSelection(selection)\n    decorations = List(decorations.map(d => Decoration.fromJSON(d)))\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.moveToStartOfNode(text)\n      selection = document.createSelection(selection)\n    }\n\n    let value = new Value({\n      data,\n      decorations,\n      document,\n      selection,\n      schema,\n      history,\n    })\n\n    if (options.normalize !== false) {\n      const change = value.change()\n      change.withoutSaving(() => change.normalize())\n      value = change.value\n    }\n\n    return value\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestBlock(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestBlock(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestInline(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestInline(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return (\n      this.selection.start.key &&\n      this.document.getDescendant(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return (\n      this.selection.end.key &&\n      this.document.getDescendant(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getDescendant(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return (\n      this.selection.focus.key &&\n      this.document.getDescendant(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextText(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousText(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Create a new `Change` with the current value as a starting point.\n   *\n   * @param {Object} attrs\n   * @return {Change}\n   */\n\n  change(attrs = {}) {\n    return new Change({ ...attrs, value: this })\n  }\n\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  addMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.addMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Value}\n   */\n\n  insertNode(path, node) {\n    let value = this\n    let { document } = value\n    document = document.insertNode(path, node)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Value}\n   */\n\n  insertText(path, offset, text, marks) {\n    let value = this\n    let { document, schema } = value\n    document = document.insertText(path, offset, text, marks)\n    value = value.set('document', document)\n\n    // Update any ranges that were affected.\n    const node = document.assertNode(path)\n\n    value = value.mapRanges(range => {\n      const { anchor, focus, isBackward } = range\n      const isAtomic =\n        Decoration.isDecoration(range) && schema.isAtomic(range.mark)\n\n      if (\n        anchor.key === node.key &&\n        (anchor.offset > offset ||\n          (anchor.offset === offset && (!isAtomic || !isBackward)))\n      ) {\n        range = range.moveAnchorForward(text.length)\n      }\n\n      if (\n        focus.key === node.key &&\n        (focus.offset > offset ||\n          (focus.offset == offset && (!isAtomic || isBackward)))\n      ) {\n        range = range.moveFocusForward(text.length)\n      }\n\n      return range\n    })\n\n    value = value.clearAtomicRanges(node.key, offset)\n    return value\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Value}\n   */\n\n  mergeNode(path) {\n    let value = this\n    const { document } = value\n    const newDocument = document.mergeNode(path)\n    path = document.resolvePath(path)\n    const withPath = PathUtils.decrement(path)\n    const one = document.getNode(withPath)\n    const two = document.getNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      if (two.object === 'text') {\n        const max = one.text.length\n\n        if (range.anchor.key === two.key) {\n          range = range.moveAnchorTo(one.key, max + range.anchor.offset)\n        }\n\n        if (range.focus.key === two.key) {\n          range = range.moveFocusTo(one.key, max + range.focus.offset)\n        }\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Value}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    let value = this\n    let { document } = value\n    document = document.moveNode(path, newPath, newIndex)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.removeMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Value}\n   */\n\n  removeNode(path) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    const first = node.object == 'text' ? node : node.getFirstText() || node\n    const last = node.object == 'text' ? node : node.getLastText() || node\n    const prev = document.getPreviousText(first.key)\n    const next = document.getNextText(last.key)\n\n    document = document.removeNode(path)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      const { start, end } = range\n\n      if (node.hasNode(start.key)) {\n        range = prev\n          ? range.moveStartTo(prev.key, prev.text.length)\n          : next ? range.moveStartTo(next.key, 0) : range.unset()\n      }\n\n      if (node.hasNode(end.key)) {\n        range = prev\n          ? range.moveEndTo(prev.key, prev.text.length)\n          : next ? range.moveEndTo(next.key, 0) : range.unset()\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Value}\n   */\n\n  removeText(path, offset, text) {\n    let value = this\n    let { document } = value\n    document = document.removeText(path, offset, text)\n    value = value.set('document', document)\n\n    const node = document.assertNode(path)\n    const { length } = text\n    const rangeOffset = offset + length\n\n    value = value.clearAtomicRanges(node.key, offset, offset + length)\n\n    value = value.mapRanges(range => {\n      const { anchor, focus } = range\n\n      if (anchor.key === node.key) {\n        range =\n          anchor.offset >= rangeOffset\n            ? range.moveAnchorBackward(length)\n            : anchor.offset > offset\n              ? range.moveAnchorTo(anchor.key, offset)\n              : range\n      }\n\n      if (focus.key === node.key) {\n        range =\n          focus.offset >= rangeOffset\n            ? range.moveFocusBackward(length)\n            : focus.offset > offset\n              ? range.moveFocusTo(focus.key, offset)\n              : range\n      }\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setNode(path, properties) {\n    let value = this\n    let { document } = value\n    document = document.setNode(path, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let value = this\n    let { document } = value\n    document = document.setMark(path, offset, length, mark, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on the value.\n   *\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setProperties(properties) {\n    let value = this\n    const { document } = value\n    const { data, decorations, history, schema } = properties\n    const props = {}\n\n    if (data) {\n      props.data = data\n    }\n\n    if (history) {\n      props.history = history\n    }\n\n    if (schema) {\n      props.schema = schema\n    }\n\n    if (decorations) {\n      props.decorations = decorations.map(d => {\n        return d.isSet ? d : document.resolveDecoration(d)\n      })\n    }\n\n    value = value.merge(props)\n    return value\n  }\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  setSelection(properties) {\n    let value = this\n    let { document, selection } = value\n    const next = selection.setProperties(properties)\n    selection = document.resolveSelection(next)\n    value = value.set('selection', selection)\n    return value\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  splitNode(path, position, properties) {\n    let value = this\n    const { document } = value\n    const newDocument = document.splitNode(path, position, properties)\n    const node = document.assertNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      const next = newDocument.getNextText(node.key)\n      const { start, end } = range\n\n      // If the start was after the split, move it to the next node.\n      if (node.key === start.key && position <= start.offset) {\n        range = range.moveStartTo(next.key, start.offset - position)\n      }\n\n      // If the end was after the split, move it to the next node.\n      if (node.key === end.key && position <= end.offset) {\n        range = range.moveEndTo(next.key, end.offset - position)\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Map all range objects to apply adjustments with an `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Value}\n   */\n\n  mapRanges(iterator) {\n    let value = this\n    const { document, selection, decorations } = value\n\n    let sel = selection.isSet ? iterator(selection) : selection\n    if (!sel) sel = selection.unset()\n    if (sel !== selection) sel = document.createSelection(sel)\n    value = value.set('selection', sel)\n\n    let decs = decorations.map(decoration => {\n      let n = decoration.isSet ? iterator(decoration) : decoration\n      if (n && n !== decoration) n = document.createDecoration(n)\n      return n\n    })\n\n    decs = decs.filter(decoration => !!decoration)\n    value = value.set('decorations', decs)\n    return value\n  }\n\n  /**\n   * Remove any atomic ranges inside a `key`, `offset` and `length`.\n   *\n   * @param {String} key\n   * @param {Number} from\n   * @param {Number?} to\n   * @return {Value}\n   */\n\n  clearAtomicRanges(key, from, to = null) {\n    let value = this\n    const { schema } = value\n\n    value = this.mapRanges(range => {\n      if (!Decoration.isDecoration(range)) return range\n      const { start, end, mark } = range\n      const isAtomic = schema.isAtomic(mark)\n      if (!isAtomic) return range\n      if (start.key !== key) return range\n\n      if (start.offset < from && (end.key !== key || end.offset > from)) {\n        return null\n      }\n\n      if (\n        to != null &&\n        start.offset < to &&\n        (end.key !== key || end.offset > to)\n      ) {\n        return null\n      }\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON(options)\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        .toArray()\n        .map(d => d.toJSON(options))\n    }\n\n    if (options.preserveHistory) {\n      object.history = this.history.toJSON(options)\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON(options)\n    }\n\n    if (options.preserveSchema) {\n      object.schema = this.schema.toJSON(options)\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n */\n\nexport default Value\n","import Value from '../models/value'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Change} change\n * @param {Object|Value} properties\n */\n\nChanges.setValue = (change, properties) => {\n  properties = Value.createProperties(properties)\n  const { value } = change\n\n  change.applyOperation({\n    type: 'set_value',\n    properties,\n    value,\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import AtCurrentRange from './at-current-range'\nimport AtRange from './at-range'\nimport ByPath from './by-path'\nimport OnHistory from './on-history'\nimport OnSelection from './on-selection'\nimport OnValue from './on-value'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  ...AtCurrentRange,\n  ...AtRange,\n  ...ByPath,\n  ...OnHistory,\n  ...OnSelection,\n  ...OnValue,\n}\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Apply an `op` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} op\n * @return {Value} value\n */\n\nfunction applyOperation(value, op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'add_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.addMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'insert_node': {\n      const { path, node } = op\n      const next = value.insertNode(path, node)\n      return next\n    }\n\n    case 'insert_text': {\n      const { path, offset, text, marks } = op\n      const next = value.insertText(path, offset, text, marks)\n      return next\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const next = value.mergeNode(path)\n      return next\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n      const next = value.moveNode(path, newPath)\n      return next\n    }\n\n    case 'remove_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.removeMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const next = value.removeNode(path)\n      return next\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      const next = value.removeText(path, offset, text)\n      return next\n    }\n\n    case 'set_mark': {\n      const { path, offset, length, mark, properties } = op\n      const next = value.setMark(path, offset, length, mark, properties)\n      return next\n    }\n\n    case 'set_node': {\n      const { path, properties } = op\n      const next = value.setNode(path, properties)\n      return next\n    }\n\n    case 'set_selection': {\n      const { properties } = op\n      const next = value.setSelection(properties)\n      return next\n    }\n\n    case 'set_value': {\n      const { properties } = op\n      const next = value.setProperties(properties)\n      return next\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n      const next = value.splitNode(path, position, properties)\n      return next\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\nimport pick from 'lodash/pick'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'insert_node': {\n      const inverse = op.set('type', 'remove_node')\n      return inverse\n    }\n\n    case 'remove_node': {\n      const inverse = op.set('type', 'insert_node')\n      return inverse\n    }\n\n    case 'move_node': {\n      const { newPath, path } = op\n      let inversePath = newPath\n      let inverseNewPath = path\n\n      const pathLast = path.size - 1\n      const newPathLast = newPath.size - 1\n\n      // If the node's old position was a left sibling of an ancestor of\n      // its new position, we need to adjust part of the path by -1.\n      if (\n        path.size < inversePath.size &&\n        path.slice(0, pathLast).every((e, i) => e == inversePath.get(i)) &&\n        path.last() < inversePath.get(pathLast)\n      ) {\n        inversePath = inversePath\n          .slice(0, pathLast)\n          .concat(inversePath.get(pathLast) - 1)\n          .concat(inversePath.slice(pathLast + 1, inversePath.size))\n      }\n\n      // If the node's new position is an ancestor of the old position,\n      // or a left sibling of an ancestor of its old position, we need\n      // to adjust part of the path by 1.\n      if (\n        newPath.size < inverseNewPath.size &&\n        newPath\n          .slice(0, newPathLast)\n          .every((e, i) => e == inverseNewPath.get(i)) &&\n        newPath.last() <= inverseNewPath.get(newPathLast)\n      ) {\n        inverseNewPath = inverseNewPath\n          .slice(0, newPathLast)\n          .concat(inverseNewPath.get(newPathLast) + 1)\n          .concat(inverseNewPath.slice(newPathLast + 1, inverseNewPath.size))\n      }\n\n      const inverse = op.set('path', inversePath).set('newPath', inverseNewPath)\n      return inverse\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const inversePath = PathUtils.decrement(path)\n      const inverse = op.set('type', 'split_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const inversePath = PathUtils.increment(path)\n      const inverse = op.set('type', 'merge_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'set_node': {\n      const { properties, node } = op\n      const inverseNode = node.merge(properties)\n      const inverseProperties = pick(node, Object.keys(properties))\n      const inverse = op\n        .set('node', inverseNode)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'insert_text': {\n      const inverse = op.set('type', 'remove_text')\n      return inverse\n    }\n\n    case 'remove_text': {\n      const inverse = op.set('type', 'insert_text')\n      return inverse\n    }\n\n    case 'add_mark': {\n      const inverse = op.set('type', 'remove_mark')\n      return inverse\n    }\n\n    case 'remove_mark': {\n      const inverse = op.set('type', 'add_mark')\n      return inverse\n    }\n\n    case 'set_mark': {\n      const { properties, mark } = op\n      const inverseMark = mark.merge(properties)\n      const inverseProperties = pick(mark, Object.keys(properties))\n      const inverse = op\n        .set('mark', inverseMark)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'set_selection': {\n      const { properties, selection } = op\n      const inverseSelection = selection.merge(properties)\n      const inverseProps = pick(selection, Object.keys(properties))\n      const inverse = op\n        .set('selection', inverseSelection)\n        .set('properties', inverseProps)\n      return inverse\n    }\n\n    case 'set_value': {\n      const { properties, value } = op\n      const inverseValue = value.merge(properties)\n      const inverseProperties = pick(value, Object.keys(properties))\n      const inverse = op\n        .set('value', inverseValue)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Mark from './mark'\nimport Node from './node'\nimport PathUtils from '../utils/path-utils'\nimport Selection from './selection'\nimport Value from './value'\nimport apply from '../operations/apply'\nimport invert from '../operations/invert'\n\n/**\n * Operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  insert_node: ['value', 'path', 'node'],\n  insert_text: ['value', 'path', 'offset', 'text', 'marks'],\n  merge_node: ['value', 'path', 'position', 'properties', 'target'],\n  move_node: ['value', 'path', 'newPath'],\n  remove_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  remove_node: ['value', 'path', 'node'],\n  remove_text: ['value', 'path', 'offset', 'text', 'marks'],\n  set_mark: ['value', 'path', 'offset', 'length', 'mark', 'properties'],\n  set_node: ['value', 'path', 'node', 'properties'],\n  set_selection: ['value', 'selection', 'properties'],\n  set_value: ['value', 'properties'],\n  split_node: ['value', 'path', 'position', 'properties', 'target'],\n}\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  selection: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  value: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      if (v === undefined) {\n        // Skip keys for objects that should not be serialized, and are only used\n        // for providing the local-only invert behavior for the history stack.\n        if (key == 'document') continue\n        if (key == 'selection') continue\n        if (key == 'value') continue\n        if (key == 'node' && type != 'insert_node') continue\n\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key === 'path' || key === 'newPath') {\n        v = PathUtils.create(v)\n      }\n\n      if (key === 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key === 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key === 'node') {\n        v = Node.create(v)\n      }\n\n      if (key === 'selection') {\n        v = Selection.create(v)\n      }\n\n      if (key === 'value') {\n        v = Value.create(v)\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_mark') {\n        v = Mark.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_selection') {\n        v = Selection.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_value') {\n        v = Value.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Apply the operation to a `value`.\n   *\n   * @param {Value} value\n   * @return {Value}\n   */\n\n  apply(value) {\n    const next = apply(value, this)\n    return next\n  }\n\n  /**\n   * Invert the operation.\n   *\n   * @return {Operation}\n   */\n\n  invert() {\n    const inverted = invert(this)\n    return inverted\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      // Skip keys for objects that should not be serialized, and are only used\n      // for providing the local-only invert behavior for the history stack.\n      if (key == 'document') continue\n      if (key == 'selection') continue\n      if (key == 'value') continue\n      if (key == 'node' && type != 'insert_node') continue\n\n      if (\n        key == 'mark' ||\n        key == 'marks' ||\n        key == 'node' ||\n        key == 'path' ||\n        key == 'newPath'\n      ) {\n        value = value.toJSON()\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const v = {}\n        if ('anchor' in value) v.anchor = value.anchor.toJSON()\n        if ('focus' in value) v.focus = value.focus.toJSON()\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value) v.marks = value.marks && value.marks.toJSON()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        if ('schema' in value) v.schema = value.schema.toJS()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n}\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport warning from 'slate-dev-warning'\nimport { List } from 'immutable'\n\nimport Changes from '../changes'\nimport Operation from './operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:change')\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change {\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object} attrs\n   *   @property {Value} value\n   */\n\n  constructor(attrs) {\n    const { value } = attrs\n    this.value = value\n    this.operations = new List()\n\n    this.tmp = {\n      dirty: [],\n      merge: null,\n      normalize: true,\n      save: true,\n    }\n  }\n\n  /**\n   * Apply an `operation` to the current value, saving the operation to the\n   * history if needed.\n   *\n   * @param {Operation|Object} operation\n   * @return {Change}\n   */\n\n  applyOperation(operation) {\n    const { operations } = this\n    let { value } = this\n    let { history } = value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Default options to the change-level flags, this allows for setting\n    // specific options for all of the operations of a given change.\n    let { merge, save } = this.tmp\n\n    // If `merge` is non-commital, and this is not the first operation in a new change\n    // then we should merge.\n    if (merge == null && operations.size !== 0) {\n      merge = true\n    }\n\n    // Apply the operation to the value.\n    debug('apply', { operation, save, merge })\n    value = operation.apply(value)\n\n    // If needed, save the operation to the history.\n    if (history && save) {\n      history = history.save(operation, { merge })\n      value = value.set('history', history)\n    }\n\n    // Get the paths of the affected nodes, and mark them as dirty.\n    const newDirtyPaths = getDirtyPaths(operation)\n    const dirty = this.tmp.dirty.reduce((memo, path) => {\n      path = PathUtils.create(path)\n      const transformed = PathUtils.transform(path, operation)\n      memo = memo.concat(transformed.toArray())\n      return memo\n    }, newDirtyPaths)\n\n    this.tmp.dirty = dirty\n\n    // Update the mutable change object.\n    this.value = value\n    this.operations = operations.push(operation)\n    return this\n  }\n\n  /**\n   * Apply a series of `operations` to the current value.\n   *\n   * @param {Array|List} operations\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperations(operations, options) {\n    operations.forEach(op => this.applyOperation(op, options))\n    return this\n  }\n\n  /**\n   * Call a change `fn` with arguments.\n   *\n   * @param {Function} fn\n   * @param {Mixed} ...args\n   * @return {Change}\n   */\n\n  call(fn, ...args) {\n    fn(this, ...args)\n    this.normalizeDirtyPaths()\n    return this\n  }\n\n  /**\n   * Normalize all of the nodes in the document from scratch.\n   *\n   * @return {Change}\n   */\n\n  normalize() {\n    const { value } = this\n    const { document } = value\n    const table = document.getKeysToPathsTable()\n    const paths = Object.values(table).map(PathUtils.create)\n    this.tmp.dirty = this.tmp.dirty.concat(paths)\n    this.normalizeDirtyPaths()\n    return this\n  }\n\n  /**\n   * Normalize any new \"dirty\" paths that have been added to the change.\n   *\n   * @return {Change}\n   */\n\n  normalizeDirtyPaths() {\n    if (!this.tmp.normalize) {\n      return this\n    }\n\n    while (this.tmp.dirty.length) {\n      const path = this.tmp.dirty.pop()\n      this.normalizeNodeByPath(path)\n    }\n\n    return this\n  }\n\n  /**\n   * Normalize the node at a specific `path`, iterating as many times as\n   * necessary until it satisfies all of the schema rules.\n   *\n   * @param {Array} path\n   * @return {Change}\n   */\n\n  normalizeNodeByPath(path) {\n    const { value } = this\n    let { document, schema } = value\n    let node = document.assertNode(path)\n\n    let iterations = 0\n    const max =\n      schema.stack.plugins.length +\n      schema.rules.length +\n      (node.object === 'text' ? 1 : node.nodes.size)\n\n    const iterate = () => {\n      const fn = node.normalize(schema)\n      if (!fn) return\n\n      // Run the normalize `fn` to fix the node.\n      fn(this)\n\n      // Attempt to re-find the node by path, or by key if it has changed\n      // locations in the tree continue iterating.\n      document = this.value.document\n      const { key } = node\n      let found = document.getDescendant(path)\n\n      if (found && found.key === key) {\n        node = found\n      } else {\n        found = document.getDescendant(key)\n\n        if (found) {\n          node = found\n          path = document.getPath(key)\n        } else {\n          // If it no longer exists by key, it was removed, so abort.\n          return\n        }\n      }\n\n      // Increment the iterations counter, and check to make sure that we haven't\n      // exceeded the max. Without this check, it's easy for the `normalize`\n      // function of a schema rule to be written incorrectly and for an infinite\n      // invalid loop to occur.\n      iterations++\n\n      if (iterations > max) {\n        throw new Error(\n          'A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.'\n        )\n      }\n\n      // Otherwise, iterate again.\n      iterate()\n    }\n\n    this.withoutNormalizing(() => {\n      iterate()\n    })\n\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, deferring\n   * normalization until after the function has finished executing.\n   *\n   * @param {Function} fn\n   * @return {Change}\n   */\n\n  withoutNormalizing(fn) {\n    const value = this.tmp.normalize\n    this.tmp.normalize = false\n    fn(this)\n    this.tmp.normalize = value\n    this.normalizeDirtyPaths()\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   *\n   * @param {Function} fn\n   * @return {Change}\n   */\n\n  withoutMerging(fn) {\n    const value = this.tmp.merge\n    this.tmp.merge = false\n    fn(this)\n    this.tmp.merge = value\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   *\n   * @param {Function} fn\n   * @return {Change}\n   */\n\n  withoutSaving(fn) {\n    const value = this.tmp.save\n    this.tmp.save = false\n    fn(this)\n    this.tmp.save = value\n    return this\n  }\n\n  /**\n   * Set an operation flag by `key` to `value`.\n   *\n   * @param {String} key\n   * @param {Any} value\n   * @return {Change}\n   */\n\n  /**\n   * Deprecated.\n   */\n\n  setOperationFlag(key, value) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.setOperationFlag` method has been deprecated.'\n    )\n\n    this.tmp[key] = value\n    return this\n  }\n\n  getFlag(key, options = {}) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.getFlag` method has been deprecated.'\n    )\n\n    return options[key] !== undefined ? options[key] : this.tmp[key]\n  }\n\n  unsetOperationFlag(key) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.unsetOperationFlag` method has been deprecated.'\n    )\n\n    delete this.tmp[key]\n    return this\n  }\n\n  withoutNormalization(fn) {\n    warning(\n      false,\n      'As of slate@0.41.0 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`.'\n    )\n\n    return this.withoutNormalizing(fn)\n  }\n}\n\n/**\n * Get the \"dirty\" paths for a given `operation`.\n *\n * @param {Operation} operation\n * @return {Array}\n */\n\nfunction getDirtyPaths(operation) {\n  const { type, node, path, newPath } = operation\n\n  switch (type) {\n    case 'add_mark':\n    case 'insert_text':\n    case 'remove_mark':\n    case 'remove_text':\n    case 'set_mark':\n    case 'set_node': {\n      return [path]\n    }\n\n    case 'insert_node': {\n      const table = node.getKeysToPathsTable()\n      const paths = Object.values(table).map(p => path.concat(p))\n      const parentPath = PathUtils.lift(path)\n      return [parentPath, path, ...paths]\n    }\n\n    case 'split_node': {\n      const parentPath = PathUtils.lift(path)\n      const nextPath = PathUtils.increment(path)\n      return [parentPath, path, nextPath]\n    }\n\n    case 'merge_node': {\n      const parentPath = PathUtils.lift(path)\n      const previousPath = PathUtils.decrement(path)\n      return [parentPath, previousPath]\n    }\n\n    case 'move_node': {\n      let parentPath = PathUtils.lift(path)\n      let newParentPath = PathUtils.lift(newPath)\n\n      // HACK: this clause only exists because the `move_path` logic isn't\n      // consistent when it deals with siblings.\n      if (!PathUtils.isSibling(path, newPath)) {\n        if (newParentPath.size && PathUtils.isYounger(path, newPath)) {\n          newParentPath = PathUtils.decrement(newParentPath, 1, path.size - 1)\n        }\n\n        if (parentPath.size && PathUtils.isYounger(newPath, path)) {\n          parentPath = PathUtils.increment(parentPath, 1, newPath.size - 1)\n        }\n      }\n\n      return [parentPath, newParentPath]\n    }\n\n    case 'remove_node': {\n      const parentPath = PathUtils.lift(path)\n      return [parentPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n\n/**\n * Add a change method for each of the changes.\n */\n\nObject.keys(Changes).forEach(type => {\n  Change.prototype[type] = function(...args) {\n    debug(type, { args })\n    this.call(Changes[type], ...args)\n    return this\n  }\n})\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","/**\n * Mix in an `Interface` to a `Class`.\n *\n * @param {Class} Interface\n * @param {Class} Class\n */\n\nexport default function mixin(Interface, Classes) {\n  for (const Class of Classes) {\n    // Copy static properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface)) {\n      if (Class.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface, name)\n      Object.defineProperty(Class, name, desc)\n    }\n\n    // Copy instance properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface.prototype)) {\n      if (Class.prototype.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface.prototype, name)\n      Object.defineProperty(Class.prototype, name, desc)\n    }\n  }\n}\n","import Block from '../models/block'\nimport Change from '../models/change'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport History from '../models/history'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Schema from '../models/schema'\nimport Selection from '../models/selection'\nimport Stack from '../models/stack'\nimport Text from '../models/text'\nimport Value from '../models/value'\nimport isObject, { TYPES } from '../utils/is-object'\nimport mixin from '../utils/mixin'\n\n/**\n * A factory for the interface that all Slate objects implement.\n *\n * @type {Function}\n */\n\nfunction create(type) {\n  const TYPE = TYPES[type]\n  const camel = `${type.charAt(0).toUpperCase()}${type.slice(1)}`\n  const is = `is${camel}`\n\n  class ObjectInterface {\n    /**\n     * Return the type of the object.\n     *\n     * @return {String}\n     */\n\n    get object() {\n      return type\n    }\n  }\n\n  ObjectInterface[is] = isObject.bind(null, type)\n  ObjectInterface.prototype[TYPE] = true\n  return ObjectInterface\n}\n\n/**\n * Mix in the object interfaces.\n */\n\nmixin(create('block'), [Block])\nmixin(create('change'), [Change])\nmixin(create('decoration'), [Decoration])\nmixin(create('document'), [Document])\nmixin(create('history'), [History])\nmixin(create('inline'), [Inline])\nmixin(create('leaf'), [Leaf])\nmixin(create('mark'), [Mark])\nmixin(create('node'), [Node])\nmixin(create('operation'), [Operation])\nmixin(create('point'), [Point])\nmixin(create('range'), [Range])\nmixin(create('schema'), [Schema])\nmixin(create('selection'), [Selection])\nmixin(create('stack'), [Stack])\nmixin(create('text'), [Text])\nmixin(create('value'), [Value])\n","import mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Change from '../models/change'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport History from '../models/history'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Schema from '../models/schema'\nimport Selection from '../models/selection'\nimport Stack from '../models/stack'\nimport Text from '../models/text'\nimport Value from '../models/value'\n\n/**\n * The interface that all Slate models implement.\n *\n * @type {Class}\n */\n\nclass ModelInterface {\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS(...args) {\n    return this.fromJSON(...args)\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(...args) {\n    return this.toJSON(...args)\n  }\n}\n\n/**\n * Mix in the common interface.\n *\n * @param {Record}\n */\n\nmixin(ModelInterface, [\n  Block,\n  Change,\n  Decoration,\n  Document,\n  History,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Schema,\n  Selection,\n  Stack,\n  Text,\n  Value,\n])\n","import warning from 'slate-dev-warning'\nimport { List } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Text from '../models/text'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass NodeInterface {\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  getFirstInvalidNode(schema) {\n    if (this.object === 'text') {\n      const invalid = this.validate(schema) ? this : null\n      return invalid\n    }\n\n    let invalid = null\n\n    this.nodes.find(n => {\n      invalid = n.validate(schema) ? n : n.getFirstInvalidNode(schema)\n      return invalid\n    })\n\n    return invalid\n  }\n\n  /**\n   * Get the first text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.find(node => {\n      if (node.object === 'text') return true\n      descendant = node.getFirstText()\n      return !!descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get an object mapping all the keys in the node to their paths.\n   *\n   * @return {Object}\n   */\n\n  getKeysToPathsTable() {\n    const ret = {\n      [this.key]: [],\n    }\n\n    if (this.nodes) {\n      this.nodes.forEach((node, i) => {\n        const nested = node.getKeysToPathsTable()\n\n        for (const key in nested) {\n          const path = nested[key]\n\n          warning(\n            !(key in ret),\n            `A node with a duplicate key of \"${key}\" was found! Duplicate keys are not allowed, you should use \\`node.regenerateKey\\` before inserting if you are reusing an existing node.`\n          )\n\n          ret[key] = [i, ...path]\n        }\n      })\n    }\n\n    return ret\n  }\n\n  /**\n   * Get the last text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object == 'text') return true\n      descendant = node.getLastText()\n      return descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get a node in the tree, or the node itself.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (this.object === 'text' && path.size) return null\n    const node = path.size ? this.getDescendant(path) : this\n    return node\n  }\n\n  /**\n   * Find the path to a node.\n   *\n   * @param {String|List} key\n   * @return {List}\n   */\n\n  getPath(key) {\n    // Handle the case of passing in a path directly, to match other methods.\n    if (List.isList(key)) return key\n\n    const dict = this.getKeysToPathsTable()\n    const path = dict[key]\n    return path ? List(path) : null\n  }\n\n  /**\n   * Get the concatenated text string of a node.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    const children = this.object === 'text' ? this.leaves : this.nodes\n    const text = children.reduce((memo, c) => memo + c.text, '')\n    return text\n  }\n\n  /**\n   * Check if a node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasNode(path) {\n    const node = this.getNode(path)\n    return !!node\n  }\n\n  /**\n   * Normalize the text node with a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Function|Void}\n   */\n\n  normalize(schema) {\n    const normalizer = schema.normalizeNode(this)\n    return normalizer\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = KeyUtils.create()\n    const node = this.set('key', key)\n    return node\n  }\n\n  /**\n   * Resolve a path from a path list or key string.\n   *\n   * An `index` can be provided, in which case paths created from a key string\n   * will have the index pushed onto them. This is helpful in cases where you\n   * want to accept either a `path` or a `key, index` combination for targeting\n   * a location in the tree that doesn't exist yet, like when inserting.\n   *\n   * @param {List|String} value\n   * @param {Number} index\n   * @return {List}\n   */\n\n  resolvePath(path, index) {\n    if (typeof path === 'string') {\n      path = this.getPath(path)\n\n      if (index != null) {\n        path = path.concat(index)\n      }\n    } else {\n      path = PathUtils.create(path)\n    }\n\n    return path\n  }\n\n  /**\n   * Validate the node against a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Error|Void}\n   */\n\n  validate(schema) {\n    const error = schema.validateNode(this)\n    return error\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(NodeInterface.prototype, [\n  'getFirstInvalidNode',\n  'getFirstText',\n  'getKeysToPathsTable',\n  'getLastText',\n  'getText',\n  'normalize',\n  'validate',\n])\n\n/**\n * Mix in the node interface.\n */\n\nmixin(NodeInterface, [Block, Document, Inline, Text])\n","import direction from 'direction'\nimport { List, OrderedSet, Set } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass ElementInterface {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  addMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.addMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Create a decoration with `properties` relative to the node.\n   *\n   * @param {Object|Decoration} properties\n   * @return {Decoration}\n   */\n\n  createDecoration(properties) {\n    properties = Decoration.createProperties(properties)\n    const decoration = this.resolveDecoration(properties)\n    return decoration\n  }\n\n  /**\n   * Create a point with `properties` relative to the node.\n   *\n   * @param {Object|Point} properties\n   * @return {Range}\n   */\n\n  createPoint(properties) {\n    properties = Point.createProperties(properties)\n    const point = this.resolvePoint(properties)\n    return point\n  }\n\n  /**\n   * Create a range with `properties` relative to the node.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  createRange(properties) {\n    properties = Range.createProperties(properties)\n    const range = this.resolveRange(properties)\n    return range\n  }\n\n  /**\n   * Create a selection with `properties` relative to the node.\n   *\n   * @param {Object|Selection} properties\n   * @return {Selection}\n   */\n\n  createSelection(properties) {\n    properties = Selection.createProperties(properties)\n    const selection = this.resolveSelection(properties)\n    return selection\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find all descendant nodes by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object != 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      const { start } = range\n      return this.getMarksAtPosition(start.key, start.offset).toSet()\n    }\n\n    const { start, end } = range\n    let startKey = start.key\n    let startOffset = start.offset\n    let endKey = end.key\n    let endOffset = end.offset\n    let startText = this.getDescendant(startKey)\n\n    if (startKey !== endKey) {\n      while (startKey !== endKey && endOffset === 0) {\n        const endText = this.getPreviousText(endKey)\n        endKey = endText.key\n        endOffset = endText.text.length\n      }\n\n      while (startKey !== endKey && startOffset === startText.text.length) {\n        startText = this.getNextText(startKey)\n        startKey = startText.key\n        startOffset = 0\n      }\n    }\n\n    if (startKey === endKey) {\n      return startText.getActiveMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const startMarks = startText.getActiveMarksBetweenOffsets(\n      startOffset,\n      startText.text.length\n    )\n    if (startMarks.size === 0) return Set()\n    const endText = this.getDescendant(endKey)\n    const endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset)\n    let marks = startMarks.intersect(endMarks)\n    // If marks is already empty, the active marks is empty\n    if (marks.size === 0) return marks\n\n    let text = this.getNextText(startKey)\n\n    while (text.key !== endKey) {\n      if (text.text.length !== 0) {\n        marks = marks.intersect(text.getActiveMarks())\n        if (marks.size === 0) return Set()\n      }\n\n      text = this.getNextText(text.key)\n    }\n    return marks\n  }\n\n  /**\n   * Get a list of the ancestors of a descendant.\n   *\n   * @param {List|String} path\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const ancestors = []\n\n    path.forEach((p, i) => {\n      const current = path.slice(0, i)\n      const parent = this.getNode(current)\n      ancestors.push(parent)\n    })\n\n    return List(ancestors)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object != 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    const array = this.getBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return List(OrderedSet(array))\n  }\n\n  /**\n   * Get the leaf block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const { start, end } = range\n    const startBlock = this.getClosestBlock(start.key)\n\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (start.key === end.key) return [startBlock]\n\n    const endBlock = this.getClosestBlock(end.key)\n    const blocks = this.getBlocksAsArray()\n    const startIndex = blocks.indexOf(startBlock)\n    const endIndex = blocks.indexOf(endBlock)\n    return blocks.slice(startIndex, endIndex + 1)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object != 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type == type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get a child node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getChild(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    const child = path.size === 1 ? this.nodes.get(path.first()) : null\n    return child\n  }\n\n  /**\n   * Get closest parent of node that matches an `iterator`.\n   *\n   * @param {List|String} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const closest = ancestors.findLast((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return closest || null\n  }\n\n  /**\n   * Get the closest block parent of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(path) {\n    const closest = this.getClosest(path, n => n.object === 'block')\n    return closest\n  }\n\n  /**\n   * Get the closest inline parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestInline(path) {\n    const closest = this.getClosest(path, n => n.object === 'inline')\n    return closest\n  }\n\n  /**\n   * Get the closest void parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Schema} schema\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(path, schema) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const ancestor = ancestors.findLast(a => schema.isVoid(a))\n    return ancestor\n  }\n\n  /**\n   * Get the common ancestor of nodes `a` and `b`.\n   *\n   * @param {List} a\n   * @param {List} b\n   * @return {Node}\n   */\n\n  getCommonAncestor(a, b) {\n    a = this.resolvePath(a)\n    b = this.resolvePath(b)\n    if (!a || !b) return null\n\n    const path = PathUtils.relate(a, b)\n    const node = this.getNode(path)\n    return node\n  }\n\n  /**\n   * Get the decorations for the node from a `stack`.\n   *\n   * @param {Stack} stack\n   * @return {List}\n   */\n\n  getDecorations(stack) {\n    const allDecorations = stack\n      .map('decorateNode', this)\n      .map(decorations => Decoration.createList(decorations))\n    const list = List(allDecorations).flatten(true)\n    return list\n  }\n\n  /**\n   * Get the depth of a descendant, with optional `startAt`.\n   *\n   * @param {List|String} path\n   * @param {Number} startAt\n   * @return {Number|Null}\n   */\n\n  getDepth(path, startAt = 1) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const node = this.getNode(path)\n    const depth = node ? path.size - 1 + startAt : null\n    return depth\n  }\n\n  /**\n   * Get a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getDescendant(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.getIn(deep)\n    return ret\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      return Document.create()\n    }\n\n    const { start, end } = range\n    let node = this\n    let targetPath = end.path\n    let targetPosition = end.offset\n    let mode = 'end'\n\n    while (targetPath.size) {\n      const index = targetPath.last()\n      node = node.splitNode(targetPath, targetPosition)\n      targetPosition = index + 1\n      targetPath = PathUtils.lift(targetPath)\n\n      if (!targetPath.size && mode === 'end') {\n        targetPath = start.path\n        targetPosition = start.offset\n        mode = 'start'\n      }\n    }\n\n    const startIndex = start.path.first() + 1\n    const endIndex = end.path.first() + 2\n    const nodes = node.nodes.slice(startIndex, endIndex)\n    const fragment = Document.create({ nodes })\n    return fragment\n  }\n\n  /**\n   * Get the furthest parent of a node that matches an `iterator`.\n   *\n   * @param {Path} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors.find((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return furthest || null\n  }\n\n  /**\n   * Get the furthest ancestor of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    const furthest = path.size ? this.nodes.get(path.first()) : null\n    return furthest\n  }\n\n  /**\n   * Get the furthest block parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'block')\n    return furthest\n  }\n\n  /**\n   * Get the furthest inline parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'inline')\n    return furthest\n  }\n\n  /**\n   * Get the furthest ancestor of a node that has only one child.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(path) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors\n      .rest()\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      .last()\n\n    return furthest || null\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object == 'text') return\n\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    const array = this.getInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    const array = this.nodes.reduce((inlines, node) => {\n      if (node.object == 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type == type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start } = range\n\n    if (range.isUnset) {\n      return Set()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.key, start.offset)\n    }\n\n    const text = this.getDescendant(start.key)\n    const marks = text.getMarksAtIndex(start.offset + 1)\n    return marks\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    const result = []\n\n    this.nodes.forEach(node => {\n      result.push(node.getMarksAsArray())\n    })\n\n    // PERF: use only one concat rather than multiple for speed.\n    const array = [].concat(...result)\n    return array\n  }\n\n  /**\n   * Get a set of marks in a `position`, the equivalent of a collapsed range\n   *\n   * @param {string} key\n   * @param {number} offset\n   * @return {Set}\n   */\n\n  getMarksAtPosition(key, offset) {\n    const text = this.getDescendant(key)\n    const currentMarks = text.getMarksAtIndex(offset)\n    if (offset !== 0) return currentMarks\n    const closestBlock = this.getClosestBlock(key)\n\n    if (closestBlock.text === '') {\n      // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n      return currentMarks\n    }\n\n    const previous = this.getPreviousText(key)\n    if (!previous) return Set()\n\n    if (closestBlock.hasDescendant(previous.key)) {\n      return previous.getMarksAtIndex(previous.text.length)\n    }\n\n    return currentMarks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    const marks = Set(this.getOrderedMarksAtRange(range))\n    return marks\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    const array = this.nodes.reduce((memo, node) => {\n      return node.object == 'text'\n        ? memo.concat(node.getMarksAsArray().filter(m => m.type == type))\n        : memo.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextBlock(key) {\n    const child = this.assertDescendant(key)\n    let last\n\n    if (child.object == 'block') {\n      last = child.getLastText()\n    } else {\n      const block = this.getClosestBlock(key)\n      last = block.getLastText()\n    }\n\n    const next = this.getNextText(last.key)\n    if (!next) return null\n\n    const closest = this.getClosestBlock(next.key)\n    return closest\n  }\n\n  /**\n   * Get the next node in the tree from a node.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      const target = PathUtils.increment(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const p = PathUtils.increment(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const next = this.getNextNode(path)\n    if (!next) return null\n    const text = next.getFirstText()\n    return text\n  }\n\n  /**\n   * Get the offset for a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n\n  getOffset(key) {\n    this.assertDescendant(key)\n\n    // Calculate the offset of the nodes before the highest child.\n    const child = this.getFurthestAncestor(key)\n    const offset = this.nodes\n      .takeUntil(n => n == child)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    const ret = this.hasChild(key) ? offset : offset + child.getOffset(key)\n    return ret\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { start } = range\n    const offset = this.getOffset(start.key) + start.offset\n    return offset\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start, end } = range\n\n    if (range.isUnset) {\n      return OrderedSet()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.key, start.offset)\n    }\n\n    const marks = this.getOrderedMarksBetweenPositions(\n      start.key,\n      start.offset,\n      end.key,\n      end.offset\n    )\n\n    return marks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   * PERF: arguments use key and offset for utilizing cache\n   *\n   * @param {string} startKey\n   * @param {number} startOffset\n   * @param {string} endKey\n   * @param {number} endOffset\n   * @returns {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksBetweenPositions(startKey, startOffset, endKey, endOffset) {\n    if (startKey === endKey) {\n      const startText = this.getDescendant(startKey)\n      return startText.getMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const texts = this.getTextsBetweenPositionsAsArray(startKey, endKey)\n\n    return OrderedSet().withMutations(result => {\n      texts.forEach(text => {\n        if (text.key === startKey) {\n          result.union(\n            text.getMarksBetweenOffsets(startOffset, text.text.length)\n          )\n        } else if (text.key === endKey) {\n          result.union(text.getMarksBetweenOffsets(0, endOffset))\n        } else {\n          result.union(text.getMarks())\n        }\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get the parent of a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getParent(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const parentPath = PathUtils.lift(path)\n    const parent = this.getNode(parentPath)\n    return parent\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(key) {\n    const child = this.assertDescendant(key)\n    let first\n\n    if (child.object == 'block') {\n      first = child.getFirstText()\n    } else {\n      const block = this.getClosestBlock(key)\n      first = block.getFirstText()\n    }\n\n    const previous = this.getPreviousText(first.key)\n    if (!previous) return null\n\n    const closest = this.getClosestBlock(previous.key)\n    return closest\n  }\n\n  /**\n   * Get the previous node from a node in the tree.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      const target = PathUtils.decrement(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the previous sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    if (path.last() === 0) return null\n    const p = PathUtils.decrement(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const previous = this.getPreviousNode(path)\n    if (!previous) return null\n    const text = previous.getLastText()\n    return text\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = true) {\n    const { start, end } = range\n\n    // PERF: if we're not selected, we can exit early.\n    if (!isSelected) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (start.key == end.key) {\n      const child = this.getFurthestAncestor(start.key)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let startIndex = null\n    let endIndex = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object == 'text') {\n        if (startIndex == null && child.key == start.key) startIndex = i\n        if (endIndex == null && child.key == end.key) endIndex = i + 1\n      } else {\n        if (startIndex == null && child.hasDescendant(start.key)) startIndex = i\n        if (endIndex == null && child.hasDescendant(end.key)) endIndex = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return startIndex == null || endIndex == null\n    })\n\n    if (isSelected && startIndex == null) startIndex = 0\n    if (isSelected && endIndex == null) endIndex = this.nodes.size\n    return startIndex == null ? null : { start: startIndex, end: endIndex }\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset === 0) return this.getFirstText()\n    if (offset === this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n    const text = this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n\n    return text\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir === 'neutral' ? null : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object == 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n    const { start, end } = range\n    const list = List(this.getTextsBetweenPositionsAsArray(start.key, end.key))\n\n    return list\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n    const { start, end } = range\n    const texts = this.getTextsBetweenPositionsAsArray(start.key, end.key)\n    return texts\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   * PERF: use key in arguments for cache\n   *\n   * @param {string} startKey\n   * @param {string} endKey\n   * @returns {Array}\n   */\n\n  getTextsBetweenPositionsAsArray(startKey, endKey) {\n    const startText = this.getDescendant(startKey)\n\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startText]\n\n    const endText = this.getDescendant(endKey)\n    const texts = this.getTextsAsArray()\n    const start = texts.indexOf(startText)\n    const end = texts.indexOf(endText, start)\n    const ret = texts.slice(start, end + 1)\n    return ret\n  }\n\n  /**\n   * Check if the node has block children.\n   *\n   * @return {Boolean}\n   */\n\n  hasBlockChildren() {\n    return !!(this.nodes && this.nodes.find(n => n.object === 'block'))\n  }\n\n  /**\n   * Check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasChild(path) {\n    const child = this.getChild(path)\n    return !!child\n  }\n\n  /**\n   * Check if a node has inline children.\n   *\n   * @return {Boolean}\n   */\n\n  hasInlineChildren() {\n    return !!(\n      this.nodes &&\n      this.nodes.find(n => n.object === 'inline' || n.object === 'text')\n    )\n  }\n\n  /**\n   * Recursively check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasDescendant(path) {\n    const descendant = this.getDescendant(path)\n    return !!descendant\n  }\n\n  /**\n   * Check if a node has a void parent.\n   *\n   * @param {List|String} path\n   * @param {Schema} schema\n   * @return {Boolean}\n   */\n\n  hasVoidParent(path, schema) {\n    const closest = this.getClosestVoid(path, schema)\n    return !!closest\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(path, node) {\n    path = this.resolvePath(path)\n    const index = path.last()\n    const parentPath = PathUtils.lift(path)\n    let parent = this.assertNode(parentPath)\n    const nodes = parent.nodes.splice(index, 0, node)\n    parent = parent.set('nodes', nodes)\n    const ret = this.replaceNode(parentPath, parent)\n    return ret\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Node}\n   */\n\n  insertText(path, offset, text, marks) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.insertText(offset, text, marks)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    const { object, nodes } = this\n    const first = nodes.first()\n    return object === 'block' && first.object !== 'block'\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    const { object, nodes } = this\n    const first = nodes.first()\n    return object === 'inline' && first.object !== 'inline'\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret !== node) nodes = nodes.set(ret.key, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, index) => {\n      let ret = node\n      if (ret.object !== 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, index, this.nodes)\n      if (ret === node) return\n\n      nodes = nodes.set(index, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Node}\n   */\n\n  mergeNode(path) {\n    const b = this.assertNode(path)\n    path = this.resolvePath(path)\n\n    if (path.last() === 0) {\n      throw new Error(\n        `Unable to merge node because it has no previous sibling: ${b}`\n      )\n    }\n\n    const withPath = PathUtils.decrement(path)\n    const a = this.assertNode(withPath)\n\n    if (a.object !== b.object) {\n      throw new Error(\n        `Unable to merge two different kinds of nodes: ${a} and ${b}`\n      )\n    }\n\n    const newNode =\n      a.object === 'text'\n        ? a.mergeText(b)\n        : a.set('nodes', a.nodes.concat(b.nodes))\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.removeNode(withPath)\n    ret = ret.insertNode(withPath, newNode)\n    return ret\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Node}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    const node = this.assertNode(path)\n    path = this.resolvePath(path)\n    newPath = this.resolvePath(newPath, newIndex)\n\n    const newParentPath = PathUtils.lift(newPath)\n    this.assertNode(newParentPath)\n\n    const [p, np] = PathUtils.crop(path, newPath)\n    const position = PathUtils.compare(p, np)\n\n    // If the old path ends above and before a node in the new path, then\n    // removing it will alter the target, so we need to adjust the new path.\n    if (path.size < newPath.size && position === -1) {\n      newPath = PathUtils.decrement(newPath, 1, p.size - 1)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(newPath, node)\n    return ret\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.removeMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Remove a node.\n   *\n   * @param {List|String} path\n   * @return {Node}\n   */\n\n  removeNode(path) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.deleteIn(deep)\n    return ret\n  }\n\n  /**\n   * Remove `text` at `offset` in node.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Node}\n   */\n\n  removeText(path, offset, text) {\n    let node = this.assertDescendant(path)\n    node = node.removeText(offset, text.length)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Replace a `node` in the tree.\n   *\n   * @param {List|Key} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  replaceNode(path, node) {\n    path = this.resolvePath(path)\n\n    if (!path) {\n      throw new Error(\n        `Unable to replace a node because it could not be found in the first place: ${path}`\n      )\n    }\n\n    if (!path.size) return node\n    this.assertNode(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.setIn(deep, node)\n    return ret\n  }\n\n  /**\n   * Resolve a `decoration`, relative to the node, ensuring that the keys and\n   * offsets in the decoration exist and that they are synced with the paths.\n   *\n   * @param {Decoration|Object} decoration\n   * @return {Decoration}\n   */\n\n  resolveDecoration(decoration) {\n    decoration = Decoration.create(decoration)\n    decoration = decoration.normalize(this)\n    return decoration\n  }\n\n  /**\n   * Resolve a `point`, relative to the node, ensuring that the keys and\n   * offsets in the point exist and that they are synced with the paths.\n   *\n   * @param {Point|Object} point\n   * @return {Point}\n   */\n\n  resolvePoint(point) {\n    point = Point.create(point)\n    point = point.normalize(this)\n    return point\n  }\n\n  /**\n   * Resolve a `range`, relative to the node, ensuring that the keys and\n   * offsets in the range exist and that they are synced with the paths.\n   *\n   * @param {Range|Object} range\n   * @return {Range}\n   */\n\n  resolveRange(range) {\n    range = Range.create(range)\n    range = range.normalize(this)\n    return range\n  }\n\n  /**\n   * Resolve a `selection`, relative to the node, ensuring that the keys and\n   * offsets in the selection exist and that they are synced with the paths.\n   *\n   * @param {Selection|Object} selection\n   * @return {Selection}\n   */\n\n  resolveSelection(selection) {\n    selection = Selection.create(selection)\n    selection = selection.normalize(this)\n    return selection\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setNode(path, properties) {\n    let node = this.assertNode(path)\n    node = node.merge(properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let node = this.assertNode(path)\n    node = node.updateMark(offset, length, mark, properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  splitNode(path, position, properties) {\n    const child = this.assertNode(path)\n    path = this.resolvePath(path)\n    let a\n    let b\n\n    if (child.object === 'text') {\n      ;[a, b] = child.splitText(position)\n    } else {\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      a = child.set('nodes', befores)\n      b = child.set('nodes', afters).regenerateKey()\n    }\n\n    if (properties && child.object !== 'text') {\n      b = b.merge(properties)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(path, b)\n    ret = ret.insertNode(path, a)\n    return ret\n  }\n}\n\n/**\n * Mix in assertion variants.\n */\n\nconst ASSERTS = ['Child', 'Depth', 'Descendant', 'Node', 'Parent', 'Path']\n\nfor (const method of ASSERTS) {\n  ElementInterface.prototype[`assert${method}`] = function(path, ...args) {\n    const ret = this[`get${method}`](path, ...args)\n\n    if (ret == null) {\n      throw new Error(\n        `\\`Node.assert${method}\\` could not find node with path or key: ${path}`\n      )\n    }\n\n    return ret\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(ElementInterface.prototype, [\n  'getBlocksAsArray',\n  'getBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getDecorations',\n  'getFragmentAtRange',\n  'getInlinesAsArray',\n  'getInlinesAtRangeAsArray',\n  'getInlinesByTypeAsArray',\n  'getMarksAsArray',\n  'getMarksAtPosition',\n  'getOrderedMarksBetweenPositions',\n  'getInsertMarksAtRange',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getOffset',\n  'getOffsetAtRange',\n  'getPreviousBlock',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsBetweenPositionsAsArray',\n])\n\n/**\n * Mix in the element interface.\n */\n\nmixin(ElementInterface, [Block, Document, Inline])\n","import mixin from '../utils/mixin'\nimport Decoration from '../models/decoration'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Decoration`, `Range` and `Selection` all implement, to make\n * working anchor and focus points easier.\n *\n * @type {Class}\n */\n\nclass RangeInterface {\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchor === this.focus ||\n      (this.anchor.key === this.focus.key &&\n        this.anchor.offset === this.focus.offset)\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is backward.\n   *\n   * @return {Boolean}\n   */\n\n  get isBackward() {\n    const { isUnset, anchor, focus } = this\n\n    if (isUnset) {\n      return null\n    }\n\n    if (anchor.key === focus.key) {\n      return anchor.offset > focus.offset\n    }\n\n    const isBackward = PathUtils.isBefore(focus.path, anchor.path)\n    return isBackward\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    const { isBackward } = this\n    const isForward = isBackward == null ? null : !isBackward\n    return isForward\n  }\n\n  /**\n   * Check whether the range isn't set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    const { anchor, focus } = this\n    const isUnset = anchor.isUnset || focus.isUnset\n    return isUnset\n  }\n\n  /**\n   * Check whether the range is set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return !this.isUnset\n  }\n\n  /**\n   * Get the start point.\n   *\n   * @return {String}\n   */\n\n  get start() {\n    return this.isBackward ? this.focus : this.anchor\n  }\n\n  /**\n   * Get the end point.\n   *\n   * @return {String}\n   */\n\n  get end() {\n    return this.isBackward ? this.anchor : this.focus\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    const range = this.setPoints([this.focus, this.anchor])\n    return range\n  }\n\n  /**\n   * Move the anchor and focus offsets forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveForward(n) {\n    return this.updatePoints(point => point.moveForward(n))\n  }\n\n  /**\n   * Move the anchor and focus offsets backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveBackward(n) {\n    return this.updatePoints(point => point.moveBackward(n))\n  }\n\n  /**\n   * Move the anchor offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorBackward(n) {\n    const range = this.setAnchor(this.anchor.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the anchor offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorForward(n) {\n    const range = this.setAnchor(this.anchor.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(path, offset) {\n    const range = this.setAnchor(this.anchor.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the end offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndBackward(n) {\n    const range = this.setEnd(this.end.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the end offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndForward(n) {\n    const range = this.setEnd(this.end.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's end point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveEndTo(path, offset) {\n    const range = this.setEnd(this.end.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToStartOfNode(node) {\n    const range = this.setEnd(this.end.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToEndOfNode(node) {\n    const range = this.setEnd(this.end.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the focus offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusBackward(n) {\n    const range = this.setFocus(this.focus.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the focus offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusForward(n) {\n    const range = this.setFocus(this.focus.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(path, offset) {\n    const range = this.setFocus(this.focus.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOfNode(node) {\n    const range = this.setFocus(this.focus.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOfNode(node) {\n    const range = this.setFocus(this.focus.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the start offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartBackward(n) {\n    const range = this.setStart(this.start.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the start offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartForward(n) {\n    const range = this.setStart(this.start.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's start point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveStartTo(path, offset) {\n    const range = this.setStart(this.start.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToStartOfNode(node) {\n    const range = this.setStart(this.start.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToEndOfNode(node) {\n    const range = this.setStart(this.start.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move range's points to a new `path` and `offset`.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveTo(path, offset) {\n    return this.updatePoints(point => point.moveTo(path, offset))\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    const range = this.setFocus(this.anchor)\n    return range\n  }\n\n  /**\n   * Move the start point to the end point.\n   *\n   * @return {Range}\n   */\n\n  moveToEnd() {\n    const range = this.setStart(this.end)\n    return range\n  }\n\n  /**\n   * Move the range's points to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToEndOfNode(node) {\n    return this.updatePoints(point => point.moveToEndOfNode(node))\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    const range = this.setAnchor(this.focus)\n    return range\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOfNode(start, end = start) {\n    const range = this.setPoints([\n      this.anchor.moveToStartOfNode(start),\n      this.focus.moveToEndOfNode(end),\n    ])\n\n    return range\n  }\n\n  /**\n   * Move the end point to the start point.\n   *\n   * @return {Range}\n   */\n\n  moveToStart() {\n    const range = this.setEnd(this.start)\n    return range\n  }\n\n  /**\n   * Move the range's points to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToStartOfNode(node) {\n    return this.updatePoints(point => point.moveToStartOfNode(node))\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    return this.updatePoints(point => point.normalize(node))\n  }\n\n  /**\n   * Set the anchor point to a new `anchor`.\n   *\n   * @param {Point} anchor\n   * @return {Range}\n   */\n\n  setAnchor(anchor) {\n    const range = this.set('anchor', anchor)\n    return range\n  }\n\n  /**\n   * Set the end point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setEnd(point) {\n    const range = this.isBackward ? this.setAnchor(point) : this.setFocus(point)\n    return range\n  }\n\n  /**\n   * Set the focus point to a new `focus`.\n   *\n   * @param {Point} focus\n   * @return {Range}\n   */\n\n  setFocus(focus) {\n    const range = this.set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points to new `values`.\n   *\n   * @param {Array<Point>} values\n   * @return {Range}\n   */\n\n  setPoints(values) {\n    const [anchor, focus] = values\n    const range = this.set('anchor', anchor).set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points with `updater` callback\n   *\n   * @param {Function} updater\n   * @return {Range}\n   */\n\n  updatePoints(updater) {\n    let { anchor, focus } = this\n    anchor = updater(anchor)\n    focus = updater(focus)\n    return this.merge({ anchor, focus })\n  }\n\n  /**\n   * Set the start point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setStart(point) {\n    const range = this.isBackward ? this.setFocus(point) : this.setAnchor(point)\n    return range\n  }\n\n  /**\n   * Set new `properties` on the range.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Range.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const range = this.merge(props)\n    return range\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n\n  /**\n   * Return a `Range` instance from any range-like instance.\n   *\n   * @return {Range}\n   */\n\n  toRange() {\n    const properties = Range.createProperties(this)\n    const range = Range.create(properties)\n    return range\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  unset() {\n    const range = this.updatePoints(p => p.unset())\n    return range\n  }\n}\n\n/**\n * Mix in the range interface.\n *\n * @param {Record}\n */\n\nmixin(RangeInterface, [Decoration, Range, Selection])\n","import apply from './apply'\nimport invert from './invert'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  apply,\n  invert,\n}\n","import './interfaces/object'\nimport './interfaces/model'\nimport './interfaces/node'\nimport './interfaces/element'\nimport './interfaces/range'\n\nimport Block from './models/block'\nimport Change from './models/change'\nimport Changes from './changes'\nimport Data from './models/data'\nimport Decoration from './models/decoration'\nimport Document from './models/document'\nimport History from './models/history'\nimport Inline from './models/inline'\nimport KeyUtils from './utils/key-utils'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport Operations from './operations'\nimport PathUtils from './utils/path-utils'\nimport Point from './models/point'\nimport Range from './models/range'\nimport Schema from './models/schema'\nimport Selection from './models/selection'\nimport Stack from './models/stack'\nimport Text from './models/text'\nimport TextUtils from './utils/text-utils'\nimport Value from './models/value'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Changes,\n  Data,\n  Decoration,\n  Document,\n  History,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Schema,\n  Selection,\n  Stack,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n\nexport default {\n  Block,\n  Changes,\n  Data,\n  Decoration,\n  Document,\n  History,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Schema,\n  Selection,\n  Stack,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n"],"names":["n","generate","create","key","Error","setGenerator","func","resetGenerator","Data","attrs","Map","isMap","isPlainObject","fromJSON","object","fromJS","DEFAULTS","undefined","Document","options","data","toJSON","nodes","toArray","map","preserveKeys","isDocument","List","isList","Array","isArray","KeyUtils","document","Node","createList","Record","Inline","type","isInline","elements","list","inline","any","every","item","Mark","isMark","Set","isSet","marks","props","mark","Leaf","newMark","equals","has","newMarks","withMutations","remove","add","set","union","text","m","isLeaf","leaves","size","invalid","result","findLast","leaf","index","firstLeaf","cache","first","unshift","offset","endOffset","left","right","find","startOffset","length","slice","of","take","skip","push","ENABLED","CACHE_KEY","LEAF","UNDEFINED","UNSET","memoize","properties","property","original","args","apply","__cache_key","__cache","__cache_no_args","takesArguments","cachedValue","keys","getIn","value","v","setIn","get","parent","child","resetMemoization","Number","MAX_SAFE_INTEGER","useMemoization","enabled","Text","l","addMarks","newFirst","splitLeaves","before","bundle","middle","after","concat","x","setLeaves","decorations","forEach","start","dec","end","hasStart","hasEnd","addMark","createLeaves","getActiveMarks","leafEnd","leafStart","intersect","toOrderedSet","c","getMarks","array","getMarksAsArray","OrderedSet","prototype","searchLeafAtOffset","delta","beforeText","afterText","nextLeaves","splice","removeMark","getLeaves","r","merge","updateMark","splitted","one","two","regenerateKey","isText","ranges","node","isNode","kind","Block","isBlock","block","Changes","PROXY_TRANSFORMS","method","change","selection","methodAtRange","match","moveToStart","moveToEnd","isExpanded","addMarkAtRange","sel","select","getActiveMarksAtRange","delete","deleteAtRange","insertBlock","insertBlockAtRange","getNode","moveToEndOfNode","insertFragment","fragment","startText","endText","startInline","lastText","getLastText","lastInline","getClosestInline","firstChild","lastChild","last","getTexts","isAppending","isAtStartOfNode","isAtEndOfNode","isInserting","hasBlockChildren","insertFragmentAtRange","newTexts","filter","includes","newText","takeLast","moveToStartOfNode","moveForward","insertInline","insertInlineAtRange","insertText","getInsertMarksAtRange","insertTextAtRange","removeMarkAtRange","replaceMark","oldMark","splitBlock","depth","splitBlockAtRange","toggleMark","exists","activeMarks","wrapText","prefix","suffix","wrapTextAtRange","isCollapsed","moveStartBackward","moveEndBackward","isForward","flip","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","isSurrogate","code","isWord","char","remaining","test","next","charAt","getCharLength","rest","charCodeAt","getCharOffset","getCharOffsetBackward","reverse","getCharOffsetForward","getWordOffset","i","started","getWordOffsetBackward","o","getWordOffsetForward","range","texts","getTextsAtRange","withoutNormalizing","addMarkByKey","addMarksAtRange","snapshotSelection","startKey","endKey","schema","isStartVoid","hasVoidParent","isEndVoid","startBlock","getClosestBlock","endBlock","isHanging","getFirstText","prevText","getPreviousText","startVoid","getClosestVoid","nextText","getNextText","removeNodeByKey","endVoid","removeTextByKey","startLength","endLength","ancestor","getCommonAncestor","startChild","getFurthestAncestor","endChild","startParent","getParent","startParentIndex","indexOf","endParentIndex","afters","startChildIndex","endChildIndex","middles","befores","lonely","getFurthestOnlyChildAncestor","moveNodeByKey","mergeNodeByKey","deleteCharBackwardAtRange","getOffset","TextUtils","deleteBackwardAtRange","deleteLineBackwardAtRange","deleteWordBackwardAtRange","focus","voidParent","isVoid","getDescendant","prev","prevBlock","prevVoid","moveAnchorTo","moveFocusBackward","traversed","deleteCharForwardAtRange","deleteForwardAtRange","deleteLineForwardAtRange","deleteWordForwardAtRange","nextBlock","getNextBlock","nextVoid","moveFocusTo","moveFocusForward","extra","insertNodeByKey","atEnd","siblingText","splitRange","splitDescendantsByKey","moveTo","normalize","mapDescendants","isAtStart","blocks","getBlocks","firstBlock","lastBlock","lonelyParent","getFurthest","p","lonelyChild","startIndex","removeNode","newIndex","nextChild","getNextSibling","nextNodes","skipUntil","lastIndex","inlineChild","inlineIndex","assertDescendant","splitNodeByKey","insertTextByKey","removeMarkByKey","setBlocksAtRange","getBlocksAtRange","sets","setNodeByKey","setInlinesAtRange","inlines","getInlinesAtRange","height","h","isBackward","moveAnchorToStartOfNode","setFocus","setPath","anchor","resolveRange","splitInlineAtRange","Infinity","toggleMarkAtRange","some","unwrapBlockAtRange","createProperties","wrappers","getClosest","isSuperset","toList","children","b","hasDescendant","firstMatch","lastMatch","takeUntil","firstText","unwrapInlineAtRange","wrapBlockAtRange","clear","firstblock","lastblock","siblings","p1","p2","indexes","reduce","ind","wrapInlineAtRange","inlineParent","wrapInlineByKey","endInline","endIndex","splitText","inlinekey","rng","startInner","startInnerIndex","endInner","startInlines","endInlines","startNode","endNode","startRange","endRange","compare","path","target","pv","tv","crop","a","min","ca","cb","decrement","increment","newValue","newPath","isAbove","t","isAfter","isBefore","isEqual","isOlder","pl","tl","isSibling","butLast","isYounger","lift","max","Math","relate","av","bv","transform","operation","position","pIndex","pEqual","pYounger","pAbove","np","npIndex","npEqual","npYounger","npAbove","paths","addMarkByPath","assertNode","operations","bx","by","ax","ay","applyOperations","insertFragmentByPath","insertNodeByPath","applyOperation","insertTextByPath","getMarksAtIndex","mergeNodeByPath","previous","getPreviousSibling","moveNodeByPath","removeMarkByPath","removeAllMarksByPath","state","getTextsAsArray","removeNodeByPath","removeTextByPath","removals","string","replaceNodeByPath","newNode","parentPath","PathUtils","replaceTextByPath","createRange","activeMark","setMarkByPath","setNodeByPath","setTextByPath","splitNodeByPath","splitDescendantsByPath","textPath","textOffset","ancestors","getAncestors","prevIndex","unwrapInlineByPath","moveToRangeOfNode","unwrapBlockByPath","unwrapNodeByPath","parentIndex","grandPath","isFirst","isLast","updatedPath","wrapBlockByPath","wrapInlineByPath","wrapNodeByPath","CHANGES","assertPath","newKey","textKey","redo","history","undos","redos","peek","pop","op","omit","withoutSaving","undo","invert","inverse","Point","isUnset","is","hasNode","point","setOffset","moveBackward","getPath","getTextAtOffset","isPoint","Decoration","decoration","isDecoration","Range","isRange","JSON","stringify","TYPES","isObject","Selection","isSelection","isFocused","createSet","blur","deselect","call","proxy","moveAnchorBackward","pointBackward","moveAnchorForward","pointForward","moveAnchorToEndOfBlock","pointEdgeObject","moveAnchorToEndOfInline","moveAnchorToEndOfDocument","moveAnchorToEndOfNode","moveToAnchor","moveAnchorToEndOfNextBlock","pointEdgeSideObject","moveAnchorToEndOfNextInline","moveAnchorToEndOfNextText","moveAnchorToEndOfPreviousBlock","moveAnchorToEndOfPreviousInline","moveAnchorToEndOfPreviousText","moveAnchorToEndOfText","moveAnchorToStartOfBlock","moveAnchorToStartOfDocument","moveAnchorToStartOfInline","moveAnchorToStartOfNextBlock","moveAnchorToStartOfNextInline","moveAnchorToStartOfNextText","moveAnchorToStartOfPreviousBlock","moveAnchorToStartOfPreviousInline","moveAnchorToStartOfPreviousText","moveAnchorToStartOfText","moveEndForward","moveEndTo","moveEndToEndOfBlock","moveEndToEndOfDocument","moveEndToEndOfNode","moveEndToEndOfInline","moveEndToEndOfNextBlock","moveEndToEndOfNextInline","moveEndToEndOfNextText","moveEndToEndOfPreviousBlock","moveEndToEndOfPreviousInline","moveEndToEndOfPreviousText","moveEndToEndOfText","moveEndToStartOfBlock","moveEndToStartOfDocument","moveEndToStartOfNode","moveEndToStartOfInline","moveEndToStartOfNextBlock","moveEndToStartOfNextInline","moveEndToStartOfNextText","moveEndToStartOfPreviousBlock","moveEndToStartOfPreviousInline","moveEndToStartOfPreviousText","moveEndToStartOfText","moveFocusToEndOfBlock","moveFocusToEndOfDocument","moveFocusToEndOfNode","moveToFocus","moveFocusToEndOfInline","moveFocusToEndOfNextBlock","moveFocusToEndOfNextInline","moveFocusToEndOfNextText","moveFocusToEndOfPreviousBlock","moveFocusToEndOfPreviousInline","moveFocusToEndOfPreviousText","moveFocusToEndOfText","moveFocusToStartOfBlock","moveFocusToStartOfDocument","moveFocusToStartOfNode","moveFocusToStartOfInline","moveFocusToStartOfNextBlock","moveFocusToStartOfNextInline","moveFocusToStartOfNextText","moveFocusToStartOfPreviousBlock","moveFocusToStartOfPreviousInline","moveFocusToStartOfPreviousText","moveFocusToStartOfText","moveStartForward","moveStartTo","moveStartToEndOfBlock","moveStartToEndOfDocument","moveStartToEndOfNode","moveStartToEndOfInline","moveStartToEndOfNextBlock","moveStartToEndOfNextInline","moveStartToEndOfNextText","moveStartToEndOfPreviousBlock","moveStartToEndOfPreviousInline","moveStartToEndOfPreviousText","moveStartToEndOfText","moveStartToStartOfBlock","moveStartToStartOfDocument","moveStartToStartOfNode","moveStartToStartOfInline","moveStartToStartOfNextBlock","moveStartToStartOfNextInline","moveStartToStartOfNextText","moveStartToStartOfPreviousBlock","moveStartToStartOfPreviousInline","moveStartToStartOfPreviousText","moveStartToStartOfText","moveToEndOfBlock","moveToEndOfDocument","moveToEndOfInline","moveToEndOfNextBlock","moveToEndOfNextInline","moveToEndOfNextText","moveToEndOfPreviousBlock","moveToEndOfPreviousInline","moveToEndOfPreviousText","moveToEndOfText","moveToRangeOfDocument","moveToStartOfBlock","moveToStartOfDocument","moveToStartOfInline","moveToStartOfNextBlock","moveToStartOfNextInline","moveToStartOfNextText","moveToStartOfPreviousBlock","moveToStartOfPreviousInline","moveToStartOfPreviousText","moveToStartOfText","snapshot","setProperties","resolveSelection","pick","Object","k","setAnchor","setEnd","setStart","withoutMerging","edge","toUpperCase","Edge","side","Side","getDirectionNode","isInBlock","isPreviousInVoid","isNextInVoid","debug","Debug","History","prevBatch","prevOperation","shouldMerge","batch","isHistory","Stack","createOperationsList","plugins","plugin","getPluginsWith","ret","reduceRight","stack","SlateError","captureStackTrace","constructor","CORE_RULES","error","Schema","rules","testRules","getNodeRules","failure","validateRules","validateNode","rule","isAtomic","isSchema","defaultNormalize","validateObject","validateType","validateData","validateMarks","validateText","validateFirst","validateLast","validateNodes","fail","fn","valid","def","replace","defs","nextDef","shift","rewind","err","validateParent","validatePrevious","validateNext","Value","Change","insertNode","mapRanges","updatePoints","clearAtomicRanges","newDocument","mergeNode","resolvePath","withPath","moveNode","unset","removeText","rangeOffset","setNode","setMark","d","resolveDecoration","splitNode","iterator","createSelection","decs","createDecoration","from","to","preserveData","preserveDecorations","preserveHistory","preserveSelection","preserveSchema","getPreviousBlock","getNextInline","getPreviousInline","getMarksAtRange","getFragmentAtRange","isValue","setValue","AtCurrentRange","AtRange","ByPath","OnHistory","OnSelection","OnValue","Operation","setSelection","invertOperation","inversePath","inverseNewPath","pathLast","newPathLast","e","inverseNode","inverseProperties","inverseMark","inverseSelection","inverseProps","inverseValue","OPERATION_ATTRIBUTES","inverted","json","ATTRIBUTES","toJS","isOperation","tmp","save","newDirtyPaths","getDirtyPaths","dirty","memo","transformed","normalizeDirtyPaths","table","getKeysToPathsTable","values","normalizeNodeByPath","iterations","iterate","found","nextPath","previousPath","newParentPath","mixin","Interface","Classes","Class","getOwnPropertyNames","name","hasOwnProperty","desc","getOwnPropertyDescriptor","defineProperty","TYPE","camel","ObjectInterface","bind","ModelInterface","NodeInterface","validate","getFirstInvalidNode","descendant","nested","dict","normalizer","normalizeNode","getText","ElementInterface","replaceNode","resolvePoint","matches","forEachDescendant","getMarksAtPosition","toSet","getActiveMarksBetweenOffsets","startMarks","endMarks","current","getBlocksAsArray","isLeafBlock","getBlocksAtRangeAsArray","getBlocksByTypeAsArray","closest","allDecorations","flatten","startAt","deep","flatMap","targetPath","targetPosition","mode","furthest","getInlinesAsArray","isLeafInline","getInlinesAtRangeAsArray","getTextsAtRangeAsArray","getInlinesByTypeAsArray","currentMarks","closestBlock","getOrderedMarksAtRange","getMarksByTypeAsArray","sibling","getNextNode","hasChild","getOrderedMarksBetweenPositions","getMarksBetweenOffsets","getTextsBetweenPositionsAsArray","getPreviousNode","isSelected","dir","direction","getChild","mergeText","deleteIn","ASSERTS","RangeInterface","setPoints","updater"],"mappings":"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"}